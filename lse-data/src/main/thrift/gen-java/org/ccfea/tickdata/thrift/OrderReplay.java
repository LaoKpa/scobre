/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.ccfea.tickdata.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OrderReplay {

  /**
   * Order-book replay service
   */
  public interface Iface {

    /**
     * Replay tick events
     * 
     * 
     * @param assetId
     * @param variables
     * @param startDate
     * @param endDate
     */
    public List<Map<String,Double>> replay(String assetId, List<String> variables, String startDate, String endDate) throws org.apache.thrift.TException;

    public List<Map<String,Double>> shuffledReplay(String assetId, List<String> variables, double proportionShuffling, int windowSize, boolean intraWindow) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void replay(String assetId, List<String> variables, String startDate, String endDate, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.replay_call> resultHandler) throws org.apache.thrift.TException;

    public void shuffledReplay(String assetId, List<String> variables, double proportionShuffling, int windowSize, boolean intraWindow, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.shuffledReplay_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<Map<String,Double>> replay(String assetId, List<String> variables, String startDate, String endDate) throws org.apache.thrift.TException
    {
      send_replay(assetId, variables, startDate, endDate);
      return recv_replay();
    }

    public void send_replay(String assetId, List<String> variables, String startDate, String endDate) throws org.apache.thrift.TException
    {
      replay_args args = new replay_args();
      args.setAssetId(assetId);
      args.setVariables(variables);
      args.setStartDate(startDate);
      args.setEndDate(endDate);
      sendBase("replay", args);
    }

    public List<Map<String,Double>> recv_replay() throws org.apache.thrift.TException
    {
      replay_result result = new replay_result();
      receiveBase(result, "replay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "replay failed: unknown result");
    }

    public List<Map<String,Double>> shuffledReplay(String assetId, List<String> variables, double proportionShuffling, int windowSize, boolean intraWindow) throws org.apache.thrift.TException
    {
      send_shuffledReplay(assetId, variables, proportionShuffling, windowSize, intraWindow);
      return recv_shuffledReplay();
    }

    public void send_shuffledReplay(String assetId, List<String> variables, double proportionShuffling, int windowSize, boolean intraWindow) throws org.apache.thrift.TException
    {
      shuffledReplay_args args = new shuffledReplay_args();
      args.setAssetId(assetId);
      args.setVariables(variables);
      args.setProportionShuffling(proportionShuffling);
      args.setWindowSize(windowSize);
      args.setIntraWindow(intraWindow);
      sendBase("shuffledReplay", args);
    }

    public List<Map<String,Double>> recv_shuffledReplay() throws org.apache.thrift.TException
    {
      shuffledReplay_result result = new shuffledReplay_result();
      receiveBase(result, "shuffledReplay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "shuffledReplay failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void replay(String assetId, List<String> variables, String startDate, String endDate, org.apache.thrift.async.AsyncMethodCallback<replay_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      replay_call method_call = new replay_call(assetId, variables, startDate, endDate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class replay_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String assetId;
      private List<String> variables;
      private String startDate;
      private String endDate;
      public replay_call(String assetId, List<String> variables, String startDate, String endDate, org.apache.thrift.async.AsyncMethodCallback<replay_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.assetId = assetId;
        this.variables = variables;
        this.startDate = startDate;
        this.endDate = endDate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("replay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        replay_args args = new replay_args();
        args.setAssetId(assetId);
        args.setVariables(variables);
        args.setStartDate(startDate);
        args.setEndDate(endDate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Map<String,Double>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_replay();
      }
    }

    public void shuffledReplay(String assetId, List<String> variables, double proportionShuffling, int windowSize, boolean intraWindow, org.apache.thrift.async.AsyncMethodCallback<shuffledReplay_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      shuffledReplay_call method_call = new shuffledReplay_call(assetId, variables, proportionShuffling, windowSize, intraWindow, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shuffledReplay_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String assetId;
      private List<String> variables;
      private double proportionShuffling;
      private int windowSize;
      private boolean intraWindow;
      public shuffledReplay_call(String assetId, List<String> variables, double proportionShuffling, int windowSize, boolean intraWindow, org.apache.thrift.async.AsyncMethodCallback<shuffledReplay_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.assetId = assetId;
        this.variables = variables;
        this.proportionShuffling = proportionShuffling;
        this.windowSize = windowSize;
        this.intraWindow = intraWindow;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shuffledReplay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        shuffledReplay_args args = new shuffledReplay_args();
        args.setAssetId(assetId);
        args.setVariables(variables);
        args.setProportionShuffling(proportionShuffling);
        args.setWindowSize(windowSize);
        args.setIntraWindow(intraWindow);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Map<String,Double>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_shuffledReplay();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("replay", new replay());
      processMap.put("shuffledReplay", new shuffledReplay());
      return processMap;
    }

    public static class replay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, replay_args> {
      public replay() {
        super("replay");
      }

      public replay_args getEmptyArgsInstance() {
        return new replay_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public replay_result getResult(I iface, replay_args args) throws org.apache.thrift.TException {
        replay_result result = new replay_result();
        result.success = iface.replay(args.assetId, args.variables, args.startDate, args.endDate);
        return result;
      }
    }

    public static class shuffledReplay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shuffledReplay_args> {
      public shuffledReplay() {
        super("shuffledReplay");
      }

      public shuffledReplay_args getEmptyArgsInstance() {
        return new shuffledReplay_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public shuffledReplay_result getResult(I iface, shuffledReplay_args args) throws org.apache.thrift.TException {
        shuffledReplay_result result = new shuffledReplay_result();
        result.success = iface.shuffledReplay(args.assetId, args.variables, args.proportionShuffling, args.windowSize, args.intraWindow);
        return result;
      }
    }

  }

  public static class replay_args implements org.apache.thrift.TBase<replay_args, replay_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replay_args");

    private static final org.apache.thrift.protocol.TField ASSET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("assetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VARIABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("variables", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replay_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replay_argsTupleSchemeFactory());
    }

    public String assetId; // required
    public List<String> variables; // required
    public String startDate; // required
    public String endDate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ASSET_ID((short)1, "assetId"),
      VARIABLES((short)2, "variables"),
      START_DATE((short)3, "startDate"),
      END_DATE((short)4, "endDate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ASSET_ID
            return ASSET_ID;
          case 2: // VARIABLES
            return VARIABLES;
          case 3: // START_DATE
            return START_DATE;
          case 4: // END_DATE
            return END_DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ASSET_ID, new org.apache.thrift.meta_data.FieldMetaData("assetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VARIABLES, new org.apache.thrift.meta_data.FieldMetaData("variables", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replay_args.class, metaDataMap);
    }

    public replay_args() {
    }

    public replay_args(
      String assetId,
      List<String> variables,
      String startDate,
      String endDate)
    {
      this();
      this.assetId = assetId;
      this.variables = variables;
      this.startDate = startDate;
      this.endDate = endDate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replay_args(replay_args other) {
      if (other.isSetAssetId()) {
        this.assetId = other.assetId;
      }
      if (other.isSetVariables()) {
        List<String> __this__variables = new ArrayList<String>();
        for (String other_element : other.variables) {
          __this__variables.add(other_element);
        }
        this.variables = __this__variables;
      }
      if (other.isSetStartDate()) {
        this.startDate = other.startDate;
      }
      if (other.isSetEndDate()) {
        this.endDate = other.endDate;
      }
    }

    public replay_args deepCopy() {
      return new replay_args(this);
    }

    @Override
    public void clear() {
      this.assetId = null;
      this.variables = null;
      this.startDate = null;
      this.endDate = null;
    }

    public String getAssetId() {
      return this.assetId;
    }

    public replay_args setAssetId(String assetId) {
      this.assetId = assetId;
      return this;
    }

    public void unsetAssetId() {
      this.assetId = null;
    }

    /** Returns true if field assetId is set (has been assigned a value) and false otherwise */
    public boolean isSetAssetId() {
      return this.assetId != null;
    }

    public void setAssetIdIsSet(boolean value) {
      if (!value) {
        this.assetId = null;
      }
    }

    public int getVariablesSize() {
      return (this.variables == null) ? 0 : this.variables.size();
    }

    public java.util.Iterator<String> getVariablesIterator() {
      return (this.variables == null) ? null : this.variables.iterator();
    }

    public void addToVariables(String elem) {
      if (this.variables == null) {
        this.variables = new ArrayList<String>();
      }
      this.variables.add(elem);
    }

    public List<String> getVariables() {
      return this.variables;
    }

    public replay_args setVariables(List<String> variables) {
      this.variables = variables;
      return this;
    }

    public void unsetVariables() {
      this.variables = null;
    }

    /** Returns true if field variables is set (has been assigned a value) and false otherwise */
    public boolean isSetVariables() {
      return this.variables != null;
    }

    public void setVariablesIsSet(boolean value) {
      if (!value) {
        this.variables = null;
      }
    }

    public String getStartDate() {
      return this.startDate;
    }

    public replay_args setStartDate(String startDate) {
      this.startDate = startDate;
      return this;
    }

    public void unsetStartDate() {
      this.startDate = null;
    }

    /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
    public boolean isSetStartDate() {
      return this.startDate != null;
    }

    public void setStartDateIsSet(boolean value) {
      if (!value) {
        this.startDate = null;
      }
    }

    public String getEndDate() {
      return this.endDate;
    }

    public replay_args setEndDate(String endDate) {
      this.endDate = endDate;
      return this;
    }

    public void unsetEndDate() {
      this.endDate = null;
    }

    /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
    public boolean isSetEndDate() {
      return this.endDate != null;
    }

    public void setEndDateIsSet(boolean value) {
      if (!value) {
        this.endDate = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ASSET_ID:
        if (value == null) {
          unsetAssetId();
        } else {
          setAssetId((String)value);
        }
        break;

      case VARIABLES:
        if (value == null) {
          unsetVariables();
        } else {
          setVariables((List<String>)value);
        }
        break;

      case START_DATE:
        if (value == null) {
          unsetStartDate();
        } else {
          setStartDate((String)value);
        }
        break;

      case END_DATE:
        if (value == null) {
          unsetEndDate();
        } else {
          setEndDate((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ASSET_ID:
        return getAssetId();

      case VARIABLES:
        return getVariables();

      case START_DATE:
        return getStartDate();

      case END_DATE:
        return getEndDate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ASSET_ID:
        return isSetAssetId();
      case VARIABLES:
        return isSetVariables();
      case START_DATE:
        return isSetStartDate();
      case END_DATE:
        return isSetEndDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replay_args)
        return this.equals((replay_args)that);
      return false;
    }

    public boolean equals(replay_args that) {
      if (that == null)
        return false;

      boolean this_present_assetId = true && this.isSetAssetId();
      boolean that_present_assetId = true && that.isSetAssetId();
      if (this_present_assetId || that_present_assetId) {
        if (!(this_present_assetId && that_present_assetId))
          return false;
        if (!this.assetId.equals(that.assetId))
          return false;
      }

      boolean this_present_variables = true && this.isSetVariables();
      boolean that_present_variables = true && that.isSetVariables();
      if (this_present_variables || that_present_variables) {
        if (!(this_present_variables && that_present_variables))
          return false;
        if (!this.variables.equals(that.variables))
          return false;
      }

      boolean this_present_startDate = true && this.isSetStartDate();
      boolean that_present_startDate = true && that.isSetStartDate();
      if (this_present_startDate || that_present_startDate) {
        if (!(this_present_startDate && that_present_startDate))
          return false;
        if (!this.startDate.equals(that.startDate))
          return false;
      }

      boolean this_present_endDate = true && this.isSetEndDate();
      boolean that_present_endDate = true && that.isSetEndDate();
      if (this_present_endDate || that_present_endDate) {
        if (!(this_present_endDate && that_present_endDate))
          return false;
        if (!this.endDate.equals(that.endDate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(replay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      replay_args typedOther = (replay_args)other;

      lastComparison = Boolean.valueOf(isSetAssetId()).compareTo(typedOther.isSetAssetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAssetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assetId, typedOther.assetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVariables()).compareTo(typedOther.isSetVariables());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVariables()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variables, typedOther.variables);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(typedOther.isSetStartDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, typedOther.startDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(typedOther.isSetEndDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, typedOther.endDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replay_args(");
      boolean first = true;

      sb.append("assetId:");
      if (this.assetId == null) {
        sb.append("null");
      } else {
        sb.append(this.assetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("variables:");
      if (this.variables == null) {
        sb.append("null");
      } else {
        sb.append(this.variables);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startDate:");
      if (this.startDate == null) {
        sb.append("null");
      } else {
        sb.append(this.startDate);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endDate:");
      if (this.endDate == null) {
        sb.append("null");
      } else {
        sb.append(this.endDate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replay_argsStandardSchemeFactory implements SchemeFactory {
      public replay_argsStandardScheme getScheme() {
        return new replay_argsStandardScheme();
      }
    }

    private static class replay_argsStandardScheme extends StandardScheme<replay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ASSET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.assetId = iprot.readString();
                struct.setAssetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VARIABLES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.variables = new ArrayList<String>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    String _elem2; // required
                    _elem2 = iprot.readString();
                    struct.variables.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setVariablesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startDate = iprot.readString();
                struct.setStartDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endDate = iprot.readString();
                struct.setEndDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.assetId != null) {
          oprot.writeFieldBegin(ASSET_ID_FIELD_DESC);
          oprot.writeString(struct.assetId);
          oprot.writeFieldEnd();
        }
        if (struct.variables != null) {
          oprot.writeFieldBegin(VARIABLES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.variables.size()));
            for (String _iter3 : struct.variables)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.startDate != null) {
          oprot.writeFieldBegin(START_DATE_FIELD_DESC);
          oprot.writeString(struct.startDate);
          oprot.writeFieldEnd();
        }
        if (struct.endDate != null) {
          oprot.writeFieldBegin(END_DATE_FIELD_DESC);
          oprot.writeString(struct.endDate);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replay_argsTupleSchemeFactory implements SchemeFactory {
      public replay_argsTupleScheme getScheme() {
        return new replay_argsTupleScheme();
      }
    }

    private static class replay_argsTupleScheme extends TupleScheme<replay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAssetId()) {
          optionals.set(0);
        }
        if (struct.isSetVariables()) {
          optionals.set(1);
        }
        if (struct.isSetStartDate()) {
          optionals.set(2);
        }
        if (struct.isSetEndDate()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAssetId()) {
          oprot.writeString(struct.assetId);
        }
        if (struct.isSetVariables()) {
          {
            oprot.writeI32(struct.variables.size());
            for (String _iter4 : struct.variables)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetStartDate()) {
          oprot.writeString(struct.startDate);
        }
        if (struct.isSetEndDate()) {
          oprot.writeString(struct.endDate);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.assetId = iprot.readString();
          struct.setAssetIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.variables = new ArrayList<String>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              String _elem7; // required
              _elem7 = iprot.readString();
              struct.variables.add(_elem7);
            }
          }
          struct.setVariablesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startDate = iprot.readString();
          struct.setStartDateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endDate = iprot.readString();
          struct.setEndDateIsSet(true);
        }
      }
    }

  }

  public static class replay_result implements org.apache.thrift.TBase<replay_result, replay_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replay_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replay_resultTupleSchemeFactory());
    }

    public List<Map<String,Double>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replay_result.class, metaDataMap);
    }

    public replay_result() {
    }

    public replay_result(
      List<Map<String,Double>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replay_result(replay_result other) {
      if (other.isSetSuccess()) {
        List<Map<String,Double>> __this__success = new ArrayList<Map<String,Double>>();
        for (Map<String,Double> other_element : other.success) {
          Map<String,Double> __this__success_copy = new HashMap<String,Double>();
          for (Map.Entry<String, Double> other_element_element : other_element.entrySet()) {

            String other_element_element_key = other_element_element.getKey();
            Double other_element_element_value = other_element_element.getValue();

            String __this__success_copy_copy_key = other_element_element_key;

            Double __this__success_copy_copy_value = other_element_element_value;

            __this__success_copy.put(__this__success_copy_copy_key, __this__success_copy_copy_value);
          }
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public replay_result deepCopy() {
      return new replay_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,Double>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,Double> elem) {
      if (this.success == null) {
        this.success = new ArrayList<Map<String,Double>>();
      }
      this.success.add(elem);
    }

    public List<Map<String,Double>> getSuccess() {
      return this.success;
    }

    public replay_result setSuccess(List<Map<String,Double>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Map<String,Double>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replay_result)
        return this.equals((replay_result)that);
      return false;
    }

    public boolean equals(replay_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(replay_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      replay_result typedOther = (replay_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replay_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replay_resultStandardSchemeFactory implements SchemeFactory {
      public replay_resultStandardScheme getScheme() {
        return new replay_resultStandardScheme();
      }
    }

    private static class replay_resultStandardScheme extends StandardScheme<replay_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<Map<String,Double>>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    Map<String,Double> _elem10; // required
                    {
                      org.apache.thrift.protocol.TMap _map11 = iprot.readMapBegin();
                      _elem10 = new HashMap<String,Double>(2*_map11.size);
                      for (int _i12 = 0; _i12 < _map11.size; ++_i12)
                      {
                        String _key13; // required
                        double _val14; // required
                        _key13 = iprot.readString();
                        _val14 = iprot.readDouble();
                        _elem10.put(_key13, _val14);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replay_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,Double> _iter15 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, _iter15.size()));
                for (Map.Entry<String, Double> _iter16 : _iter15.entrySet())
                {
                  oprot.writeString(_iter16.getKey());
                  oprot.writeDouble(_iter16.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replay_resultTupleSchemeFactory implements SchemeFactory {
      public replay_resultTupleScheme getScheme() {
        return new replay_resultTupleScheme();
      }
    }

    private static class replay_resultTupleScheme extends TupleScheme<replay_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,Double> _iter17 : struct.success)
            {
              {
                oprot.writeI32(_iter17.size());
                for (Map.Entry<String, Double> _iter18 : _iter17.entrySet())
                {
                  oprot.writeString(_iter18.getKey());
                  oprot.writeDouble(_iter18.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list19 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new ArrayList<Map<String,Double>>(_list19.size);
            for (int _i20 = 0; _i20 < _list19.size; ++_i20)
            {
              Map<String,Double> _elem21; // required
              {
                org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _elem21 = new HashMap<String,Double>(2*_map22.size);
                for (int _i23 = 0; _i23 < _map22.size; ++_i23)
                {
                  String _key24; // required
                  double _val25; // required
                  _key24 = iprot.readString();
                  _val25 = iprot.readDouble();
                  _elem21.put(_key24, _val25);
                }
              }
              struct.success.add(_elem21);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class shuffledReplay_args implements org.apache.thrift.TBase<shuffledReplay_args, shuffledReplay_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shuffledReplay_args");

    private static final org.apache.thrift.protocol.TField ASSET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("assetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VARIABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("variables", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField PROPORTION_SHUFFLING_FIELD_DESC = new org.apache.thrift.protocol.TField("proportionShuffling", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField WINDOW_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("windowSize", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField INTRA_WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("intraWindow", org.apache.thrift.protocol.TType.BOOL, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shuffledReplay_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shuffledReplay_argsTupleSchemeFactory());
    }

    public String assetId; // required
    public List<String> variables; // required
    public double proportionShuffling; // required
    public int windowSize; // required
    public boolean intraWindow; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ASSET_ID((short)1, "assetId"),
      VARIABLES((short)2, "variables"),
      PROPORTION_SHUFFLING((short)3, "proportionShuffling"),
      WINDOW_SIZE((short)4, "windowSize"),
      INTRA_WINDOW((short)5, "intraWindow");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ASSET_ID
            return ASSET_ID;
          case 2: // VARIABLES
            return VARIABLES;
          case 3: // PROPORTION_SHUFFLING
            return PROPORTION_SHUFFLING;
          case 4: // WINDOW_SIZE
            return WINDOW_SIZE;
          case 5: // INTRA_WINDOW
            return INTRA_WINDOW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROPORTIONSHUFFLING_ISSET_ID = 0;
    private static final int __WINDOWSIZE_ISSET_ID = 1;
    private static final int __INTRAWINDOW_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ASSET_ID, new org.apache.thrift.meta_data.FieldMetaData("assetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VARIABLES, new org.apache.thrift.meta_data.FieldMetaData("variables", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.PROPORTION_SHUFFLING, new org.apache.thrift.meta_data.FieldMetaData("proportionShuffling", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.WINDOW_SIZE, new org.apache.thrift.meta_data.FieldMetaData("windowSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.INTRA_WINDOW, new org.apache.thrift.meta_data.FieldMetaData("intraWindow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shuffledReplay_args.class, metaDataMap);
    }

    public shuffledReplay_args() {
    }

    public shuffledReplay_args(
      String assetId,
      List<String> variables,
      double proportionShuffling,
      int windowSize,
      boolean intraWindow)
    {
      this();
      this.assetId = assetId;
      this.variables = variables;
      this.proportionShuffling = proportionShuffling;
      setProportionShufflingIsSet(true);
      this.windowSize = windowSize;
      setWindowSizeIsSet(true);
      this.intraWindow = intraWindow;
      setIntraWindowIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shuffledReplay_args(shuffledReplay_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAssetId()) {
        this.assetId = other.assetId;
      }
      if (other.isSetVariables()) {
        List<String> __this__variables = new ArrayList<String>();
        for (String other_element : other.variables) {
          __this__variables.add(other_element);
        }
        this.variables = __this__variables;
      }
      this.proportionShuffling = other.proportionShuffling;
      this.windowSize = other.windowSize;
      this.intraWindow = other.intraWindow;
    }

    public shuffledReplay_args deepCopy() {
      return new shuffledReplay_args(this);
    }

    @Override
    public void clear() {
      this.assetId = null;
      this.variables = null;
      setProportionShufflingIsSet(false);
      this.proportionShuffling = 0.0;
      setWindowSizeIsSet(false);
      this.windowSize = 0;
      setIntraWindowIsSet(false);
      this.intraWindow = false;
    }

    public String getAssetId() {
      return this.assetId;
    }

    public shuffledReplay_args setAssetId(String assetId) {
      this.assetId = assetId;
      return this;
    }

    public void unsetAssetId() {
      this.assetId = null;
    }

    /** Returns true if field assetId is set (has been assigned a value) and false otherwise */
    public boolean isSetAssetId() {
      return this.assetId != null;
    }

    public void setAssetIdIsSet(boolean value) {
      if (!value) {
        this.assetId = null;
      }
    }

    public int getVariablesSize() {
      return (this.variables == null) ? 0 : this.variables.size();
    }

    public java.util.Iterator<String> getVariablesIterator() {
      return (this.variables == null) ? null : this.variables.iterator();
    }

    public void addToVariables(String elem) {
      if (this.variables == null) {
        this.variables = new ArrayList<String>();
      }
      this.variables.add(elem);
    }

    public List<String> getVariables() {
      return this.variables;
    }

    public shuffledReplay_args setVariables(List<String> variables) {
      this.variables = variables;
      return this;
    }

    public void unsetVariables() {
      this.variables = null;
    }

    /** Returns true if field variables is set (has been assigned a value) and false otherwise */
    public boolean isSetVariables() {
      return this.variables != null;
    }

    public void setVariablesIsSet(boolean value) {
      if (!value) {
        this.variables = null;
      }
    }

    public double getProportionShuffling() {
      return this.proportionShuffling;
    }

    public shuffledReplay_args setProportionShuffling(double proportionShuffling) {
      this.proportionShuffling = proportionShuffling;
      setProportionShufflingIsSet(true);
      return this;
    }

    public void unsetProportionShuffling() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROPORTIONSHUFFLING_ISSET_ID);
    }

    /** Returns true if field proportionShuffling is set (has been assigned a value) and false otherwise */
    public boolean isSetProportionShuffling() {
      return EncodingUtils.testBit(__isset_bitfield, __PROPORTIONSHUFFLING_ISSET_ID);
    }

    public void setProportionShufflingIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROPORTIONSHUFFLING_ISSET_ID, value);
    }

    public int getWindowSize() {
      return this.windowSize;
    }

    public shuffledReplay_args setWindowSize(int windowSize) {
      this.windowSize = windowSize;
      setWindowSizeIsSet(true);
      return this;
    }

    public void unsetWindowSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINDOWSIZE_ISSET_ID);
    }

    /** Returns true if field windowSize is set (has been assigned a value) and false otherwise */
    public boolean isSetWindowSize() {
      return EncodingUtils.testBit(__isset_bitfield, __WINDOWSIZE_ISSET_ID);
    }

    public void setWindowSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINDOWSIZE_ISSET_ID, value);
    }

    public boolean isIntraWindow() {
      return this.intraWindow;
    }

    public shuffledReplay_args setIntraWindow(boolean intraWindow) {
      this.intraWindow = intraWindow;
      setIntraWindowIsSet(true);
      return this;
    }

    public void unsetIntraWindow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTRAWINDOW_ISSET_ID);
    }

    /** Returns true if field intraWindow is set (has been assigned a value) and false otherwise */
    public boolean isSetIntraWindow() {
      return EncodingUtils.testBit(__isset_bitfield, __INTRAWINDOW_ISSET_ID);
    }

    public void setIntraWindowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTRAWINDOW_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ASSET_ID:
        if (value == null) {
          unsetAssetId();
        } else {
          setAssetId((String)value);
        }
        break;

      case VARIABLES:
        if (value == null) {
          unsetVariables();
        } else {
          setVariables((List<String>)value);
        }
        break;

      case PROPORTION_SHUFFLING:
        if (value == null) {
          unsetProportionShuffling();
        } else {
          setProportionShuffling((Double)value);
        }
        break;

      case WINDOW_SIZE:
        if (value == null) {
          unsetWindowSize();
        } else {
          setWindowSize((Integer)value);
        }
        break;

      case INTRA_WINDOW:
        if (value == null) {
          unsetIntraWindow();
        } else {
          setIntraWindow((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ASSET_ID:
        return getAssetId();

      case VARIABLES:
        return getVariables();

      case PROPORTION_SHUFFLING:
        return Double.valueOf(getProportionShuffling());

      case WINDOW_SIZE:
        return Integer.valueOf(getWindowSize());

      case INTRA_WINDOW:
        return Boolean.valueOf(isIntraWindow());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ASSET_ID:
        return isSetAssetId();
      case VARIABLES:
        return isSetVariables();
      case PROPORTION_SHUFFLING:
        return isSetProportionShuffling();
      case WINDOW_SIZE:
        return isSetWindowSize();
      case INTRA_WINDOW:
        return isSetIntraWindow();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shuffledReplay_args)
        return this.equals((shuffledReplay_args)that);
      return false;
    }

    public boolean equals(shuffledReplay_args that) {
      if (that == null)
        return false;

      boolean this_present_assetId = true && this.isSetAssetId();
      boolean that_present_assetId = true && that.isSetAssetId();
      if (this_present_assetId || that_present_assetId) {
        if (!(this_present_assetId && that_present_assetId))
          return false;
        if (!this.assetId.equals(that.assetId))
          return false;
      }

      boolean this_present_variables = true && this.isSetVariables();
      boolean that_present_variables = true && that.isSetVariables();
      if (this_present_variables || that_present_variables) {
        if (!(this_present_variables && that_present_variables))
          return false;
        if (!this.variables.equals(that.variables))
          return false;
      }

      boolean this_present_proportionShuffling = true;
      boolean that_present_proportionShuffling = true;
      if (this_present_proportionShuffling || that_present_proportionShuffling) {
        if (!(this_present_proportionShuffling && that_present_proportionShuffling))
          return false;
        if (this.proportionShuffling != that.proportionShuffling)
          return false;
      }

      boolean this_present_windowSize = true;
      boolean that_present_windowSize = true;
      if (this_present_windowSize || that_present_windowSize) {
        if (!(this_present_windowSize && that_present_windowSize))
          return false;
        if (this.windowSize != that.windowSize)
          return false;
      }

      boolean this_present_intraWindow = true;
      boolean that_present_intraWindow = true;
      if (this_present_intraWindow || that_present_intraWindow) {
        if (!(this_present_intraWindow && that_present_intraWindow))
          return false;
        if (this.intraWindow != that.intraWindow)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shuffledReplay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shuffledReplay_args typedOther = (shuffledReplay_args)other;

      lastComparison = Boolean.valueOf(isSetAssetId()).compareTo(typedOther.isSetAssetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAssetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assetId, typedOther.assetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVariables()).compareTo(typedOther.isSetVariables());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVariables()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variables, typedOther.variables);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProportionShuffling()).compareTo(typedOther.isSetProportionShuffling());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProportionShuffling()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proportionShuffling, typedOther.proportionShuffling);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWindowSize()).compareTo(typedOther.isSetWindowSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindowSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.windowSize, typedOther.windowSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIntraWindow()).compareTo(typedOther.isSetIntraWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIntraWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intraWindow, typedOther.intraWindow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shuffledReplay_args(");
      boolean first = true;

      sb.append("assetId:");
      if (this.assetId == null) {
        sb.append("null");
      } else {
        sb.append(this.assetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("variables:");
      if (this.variables == null) {
        sb.append("null");
      } else {
        sb.append(this.variables);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("proportionShuffling:");
      sb.append(this.proportionShuffling);
      first = false;
      if (!first) sb.append(", ");
      sb.append("windowSize:");
      sb.append(this.windowSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("intraWindow:");
      sb.append(this.intraWindow);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shuffledReplay_argsStandardSchemeFactory implements SchemeFactory {
      public shuffledReplay_argsStandardScheme getScheme() {
        return new shuffledReplay_argsStandardScheme();
      }
    }

    private static class shuffledReplay_argsStandardScheme extends StandardScheme<shuffledReplay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shuffledReplay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ASSET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.assetId = iprot.readString();
                struct.setAssetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VARIABLES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                  struct.variables = new ArrayList<String>(_list26.size);
                  for (int _i27 = 0; _i27 < _list26.size; ++_i27)
                  {
                    String _elem28; // required
                    _elem28 = iprot.readString();
                    struct.variables.add(_elem28);
                  }
                  iprot.readListEnd();
                }
                struct.setVariablesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROPORTION_SHUFFLING
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.proportionShuffling = iprot.readDouble();
                struct.setProportionShufflingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // WINDOW_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.windowSize = iprot.readI32();
                struct.setWindowSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // INTRA_WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.intraWindow = iprot.readBool();
                struct.setIntraWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shuffledReplay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.assetId != null) {
          oprot.writeFieldBegin(ASSET_ID_FIELD_DESC);
          oprot.writeString(struct.assetId);
          oprot.writeFieldEnd();
        }
        if (struct.variables != null) {
          oprot.writeFieldBegin(VARIABLES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.variables.size()));
            for (String _iter29 : struct.variables)
            {
              oprot.writeString(_iter29);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROPORTION_SHUFFLING_FIELD_DESC);
        oprot.writeDouble(struct.proportionShuffling);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(WINDOW_SIZE_FIELD_DESC);
        oprot.writeI32(struct.windowSize);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(INTRA_WINDOW_FIELD_DESC);
        oprot.writeBool(struct.intraWindow);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shuffledReplay_argsTupleSchemeFactory implements SchemeFactory {
      public shuffledReplay_argsTupleScheme getScheme() {
        return new shuffledReplay_argsTupleScheme();
      }
    }

    private static class shuffledReplay_argsTupleScheme extends TupleScheme<shuffledReplay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shuffledReplay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAssetId()) {
          optionals.set(0);
        }
        if (struct.isSetVariables()) {
          optionals.set(1);
        }
        if (struct.isSetProportionShuffling()) {
          optionals.set(2);
        }
        if (struct.isSetWindowSize()) {
          optionals.set(3);
        }
        if (struct.isSetIntraWindow()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetAssetId()) {
          oprot.writeString(struct.assetId);
        }
        if (struct.isSetVariables()) {
          {
            oprot.writeI32(struct.variables.size());
            for (String _iter30 : struct.variables)
            {
              oprot.writeString(_iter30);
            }
          }
        }
        if (struct.isSetProportionShuffling()) {
          oprot.writeDouble(struct.proportionShuffling);
        }
        if (struct.isSetWindowSize()) {
          oprot.writeI32(struct.windowSize);
        }
        if (struct.isSetIntraWindow()) {
          oprot.writeBool(struct.intraWindow);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shuffledReplay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.assetId = iprot.readString();
          struct.setAssetIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.variables = new ArrayList<String>(_list31.size);
            for (int _i32 = 0; _i32 < _list31.size; ++_i32)
            {
              String _elem33; // required
              _elem33 = iprot.readString();
              struct.variables.add(_elem33);
            }
          }
          struct.setVariablesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.proportionShuffling = iprot.readDouble();
          struct.setProportionShufflingIsSet(true);
        }
        if (incoming.get(3)) {
          struct.windowSize = iprot.readI32();
          struct.setWindowSizeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.intraWindow = iprot.readBool();
          struct.setIntraWindowIsSet(true);
        }
      }
    }

  }

  public static class shuffledReplay_result implements org.apache.thrift.TBase<shuffledReplay_result, shuffledReplay_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shuffledReplay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shuffledReplay_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shuffledReplay_resultTupleSchemeFactory());
    }

    public List<Map<String,Double>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shuffledReplay_result.class, metaDataMap);
    }

    public shuffledReplay_result() {
    }

    public shuffledReplay_result(
      List<Map<String,Double>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shuffledReplay_result(shuffledReplay_result other) {
      if (other.isSetSuccess()) {
        List<Map<String,Double>> __this__success = new ArrayList<Map<String,Double>>();
        for (Map<String,Double> other_element : other.success) {
          Map<String,Double> __this__success_copy = new HashMap<String,Double>();
          for (Map.Entry<String, Double> other_element_element : other_element.entrySet()) {

            String other_element_element_key = other_element_element.getKey();
            Double other_element_element_value = other_element_element.getValue();

            String __this__success_copy_copy_key = other_element_element_key;

            Double __this__success_copy_copy_value = other_element_element_value;

            __this__success_copy.put(__this__success_copy_copy_key, __this__success_copy_copy_value);
          }
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public shuffledReplay_result deepCopy() {
      return new shuffledReplay_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,Double>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,Double> elem) {
      if (this.success == null) {
        this.success = new ArrayList<Map<String,Double>>();
      }
      this.success.add(elem);
    }

    public List<Map<String,Double>> getSuccess() {
      return this.success;
    }

    public shuffledReplay_result setSuccess(List<Map<String,Double>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Map<String,Double>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shuffledReplay_result)
        return this.equals((shuffledReplay_result)that);
      return false;
    }

    public boolean equals(shuffledReplay_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shuffledReplay_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shuffledReplay_result typedOther = (shuffledReplay_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shuffledReplay_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shuffledReplay_resultStandardSchemeFactory implements SchemeFactory {
      public shuffledReplay_resultStandardScheme getScheme() {
        return new shuffledReplay_resultStandardScheme();
      }
    }

    private static class shuffledReplay_resultStandardScheme extends StandardScheme<shuffledReplay_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shuffledReplay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                  struct.success = new ArrayList<Map<String,Double>>(_list34.size);
                  for (int _i35 = 0; _i35 < _list34.size; ++_i35)
                  {
                    Map<String,Double> _elem36; // required
                    {
                      org.apache.thrift.protocol.TMap _map37 = iprot.readMapBegin();
                      _elem36 = new HashMap<String,Double>(2*_map37.size);
                      for (int _i38 = 0; _i38 < _map37.size; ++_i38)
                      {
                        String _key39; // required
                        double _val40; // required
                        _key39 = iprot.readString();
                        _val40 = iprot.readDouble();
                        _elem36.put(_key39, _val40);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem36);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shuffledReplay_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,Double> _iter41 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, _iter41.size()));
                for (Map.Entry<String, Double> _iter42 : _iter41.entrySet())
                {
                  oprot.writeString(_iter42.getKey());
                  oprot.writeDouble(_iter42.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shuffledReplay_resultTupleSchemeFactory implements SchemeFactory {
      public shuffledReplay_resultTupleScheme getScheme() {
        return new shuffledReplay_resultTupleScheme();
      }
    }

    private static class shuffledReplay_resultTupleScheme extends TupleScheme<shuffledReplay_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shuffledReplay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,Double> _iter43 : struct.success)
            {
              {
                oprot.writeI32(_iter43.size());
                for (Map.Entry<String, Double> _iter44 : _iter43.entrySet())
                {
                  oprot.writeString(_iter44.getKey());
                  oprot.writeDouble(_iter44.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shuffledReplay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new ArrayList<Map<String,Double>>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              Map<String,Double> _elem47; // required
              {
                org.apache.thrift.protocol.TMap _map48 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _elem47 = new HashMap<String,Double>(2*_map48.size);
                for (int _i49 = 0; _i49 < _map48.size; ++_i49)
                {
                  String _key50; // required
                  double _val51; // required
                  _key50 = iprot.readString();
                  _val51 = iprot.readDouble();
                  _elem47.put(_key50, _val51);
                }
              }
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
