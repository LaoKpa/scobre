/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.ccfea.tickdata.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OrderReplay {

  /**
   * Order-book replay service
   */
  public interface Iface {

    /**
     * Replay tick events
     * 
     * 
     * @param assetId
     * @param variables
     * @param startDateTime
     * @param endDateTime
     */
    public Map<String,List<Double>> replay(String assetId, List<String> variables, long startDateTime, long endDateTime) throws org.apache.thrift.TException;

    public long replayToCsv(String assetId, List<String> variables, long startDateTime, long endDateTime, String csvFileName) throws org.apache.thrift.TException;

    public Map<String,List<Double>> shuffledReplay(String assetId, List<String> variables, double proportionShuffling, int windowSize, boolean intraWindow, int offsetting, int attribute) throws org.apache.thrift.TException;

    public Map<String,List<Double>> shuffledReplayDateRange(String assetId, List<String> variables, double proportionShuffling, int windowSize, boolean intraWindow, int offsetting, int attribute, long startDateTime, long endDateTime) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void replay(String assetId, List<String> variables, long startDateTime, long endDateTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void replayToCsv(String assetId, List<String> variables, long startDateTime, long endDateTime, String csvFileName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void shuffledReplay(String assetId, List<String> variables, double proportionShuffling, int windowSize, boolean intraWindow, int offsetting, int attribute, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void shuffledReplayDateRange(String assetId, List<String> variables, double proportionShuffling, int windowSize, boolean intraWindow, int offsetting, int attribute, long startDateTime, long endDateTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Map<String,List<Double>> replay(String assetId, List<String> variables, long startDateTime, long endDateTime) throws org.apache.thrift.TException
    {
      send_replay(assetId, variables, startDateTime, endDateTime);
      return recv_replay();
    }

    public void send_replay(String assetId, List<String> variables, long startDateTime, long endDateTime) throws org.apache.thrift.TException
    {
      replay_args args = new replay_args();
      args.setAssetId(assetId);
      args.setVariables(variables);
      args.setStartDateTime(startDateTime);
      args.setEndDateTime(endDateTime);
      sendBase("replay", args);
    }

    public Map<String,List<Double>> recv_replay() throws org.apache.thrift.TException
    {
      replay_result result = new replay_result();
      receiveBase(result, "replay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "replay failed: unknown result");
    }

    public long replayToCsv(String assetId, List<String> variables, long startDateTime, long endDateTime, String csvFileName) throws org.apache.thrift.TException
    {
      send_replayToCsv(assetId, variables, startDateTime, endDateTime, csvFileName);
      return recv_replayToCsv();
    }

    public void send_replayToCsv(String assetId, List<String> variables, long startDateTime, long endDateTime, String csvFileName) throws org.apache.thrift.TException
    {
      replayToCsv_args args = new replayToCsv_args();
      args.setAssetId(assetId);
      args.setVariables(variables);
      args.setStartDateTime(startDateTime);
      args.setEndDateTime(endDateTime);
      args.setCsvFileName(csvFileName);
      sendBase("replayToCsv", args);
    }

    public long recv_replayToCsv() throws org.apache.thrift.TException
    {
      replayToCsv_result result = new replayToCsv_result();
      receiveBase(result, "replayToCsv");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "replayToCsv failed: unknown result");
    }

    public Map<String,List<Double>> shuffledReplay(String assetId, List<String> variables, double proportionShuffling, int windowSize, boolean intraWindow, int offsetting, int attribute) throws org.apache.thrift.TException
    {
      send_shuffledReplay(assetId, variables, proportionShuffling, windowSize, intraWindow, offsetting, attribute);
      return recv_shuffledReplay();
    }

    public void send_shuffledReplay(String assetId, List<String> variables, double proportionShuffling, int windowSize, boolean intraWindow, int offsetting, int attribute) throws org.apache.thrift.TException
    {
      shuffledReplay_args args = new shuffledReplay_args();
      args.setAssetId(assetId);
      args.setVariables(variables);
      args.setProportionShuffling(proportionShuffling);
      args.setWindowSize(windowSize);
      args.setIntraWindow(intraWindow);
      args.setOffsetting(offsetting);
      args.setAttribute(attribute);
      sendBase("shuffledReplay", args);
    }

    public Map<String,List<Double>> recv_shuffledReplay() throws org.apache.thrift.TException
    {
      shuffledReplay_result result = new shuffledReplay_result();
      receiveBase(result, "shuffledReplay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "shuffledReplay failed: unknown result");
    }

    public Map<String,List<Double>> shuffledReplayDateRange(String assetId, List<String> variables, double proportionShuffling, int windowSize, boolean intraWindow, int offsetting, int attribute, long startDateTime, long endDateTime) throws org.apache.thrift.TException
    {
      send_shuffledReplayDateRange(assetId, variables, proportionShuffling, windowSize, intraWindow, offsetting, attribute, startDateTime, endDateTime);
      return recv_shuffledReplayDateRange();
    }

    public void send_shuffledReplayDateRange(String assetId, List<String> variables, double proportionShuffling, int windowSize, boolean intraWindow, int offsetting, int attribute, long startDateTime, long endDateTime) throws org.apache.thrift.TException
    {
      shuffledReplayDateRange_args args = new shuffledReplayDateRange_args();
      args.setAssetId(assetId);
      args.setVariables(variables);
      args.setProportionShuffling(proportionShuffling);
      args.setWindowSize(windowSize);
      args.setIntraWindow(intraWindow);
      args.setOffsetting(offsetting);
      args.setAttribute(attribute);
      args.setStartDateTime(startDateTime);
      args.setEndDateTime(endDateTime);
      sendBase("shuffledReplayDateRange", args);
    }

    public Map<String,List<Double>> recv_shuffledReplayDateRange() throws org.apache.thrift.TException
    {
      shuffledReplayDateRange_result result = new shuffledReplayDateRange_result();
      receiveBase(result, "shuffledReplayDateRange");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "shuffledReplayDateRange failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void replay(String assetId, List<String> variables, long startDateTime, long endDateTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      replay_call method_call = new replay_call(assetId, variables, startDateTime, endDateTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class replay_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String assetId;
      private List<String> variables;
      private long startDateTime;
      private long endDateTime;
      public replay_call(String assetId, List<String> variables, long startDateTime, long endDateTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.assetId = assetId;
        this.variables = variables;
        this.startDateTime = startDateTime;
        this.endDateTime = endDateTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("replay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        replay_args args = new replay_args();
        args.setAssetId(assetId);
        args.setVariables(variables);
        args.setStartDateTime(startDateTime);
        args.setEndDateTime(endDateTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,List<Double>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_replay();
      }
    }

    public void replayToCsv(String assetId, List<String> variables, long startDateTime, long endDateTime, String csvFileName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      replayToCsv_call method_call = new replayToCsv_call(assetId, variables, startDateTime, endDateTime, csvFileName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class replayToCsv_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String assetId;
      private List<String> variables;
      private long startDateTime;
      private long endDateTime;
      private String csvFileName;
      public replayToCsv_call(String assetId, List<String> variables, long startDateTime, long endDateTime, String csvFileName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.assetId = assetId;
        this.variables = variables;
        this.startDateTime = startDateTime;
        this.endDateTime = endDateTime;
        this.csvFileName = csvFileName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("replayToCsv", org.apache.thrift.protocol.TMessageType.CALL, 0));
        replayToCsv_args args = new replayToCsv_args();
        args.setAssetId(assetId);
        args.setVariables(variables);
        args.setStartDateTime(startDateTime);
        args.setEndDateTime(endDateTime);
        args.setCsvFileName(csvFileName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_replayToCsv();
      }
    }

    public void shuffledReplay(String assetId, List<String> variables, double proportionShuffling, int windowSize, boolean intraWindow, int offsetting, int attribute, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      shuffledReplay_call method_call = new shuffledReplay_call(assetId, variables, proportionShuffling, windowSize, intraWindow, offsetting, attribute, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shuffledReplay_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String assetId;
      private List<String> variables;
      private double proportionShuffling;
      private int windowSize;
      private boolean intraWindow;
      private int offsetting;
      private int attribute;
      public shuffledReplay_call(String assetId, List<String> variables, double proportionShuffling, int windowSize, boolean intraWindow, int offsetting, int attribute, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.assetId = assetId;
        this.variables = variables;
        this.proportionShuffling = proportionShuffling;
        this.windowSize = windowSize;
        this.intraWindow = intraWindow;
        this.offsetting = offsetting;
        this.attribute = attribute;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shuffledReplay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        shuffledReplay_args args = new shuffledReplay_args();
        args.setAssetId(assetId);
        args.setVariables(variables);
        args.setProportionShuffling(proportionShuffling);
        args.setWindowSize(windowSize);
        args.setIntraWindow(intraWindow);
        args.setOffsetting(offsetting);
        args.setAttribute(attribute);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,List<Double>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_shuffledReplay();
      }
    }

    public void shuffledReplayDateRange(String assetId, List<String> variables, double proportionShuffling, int windowSize, boolean intraWindow, int offsetting, int attribute, long startDateTime, long endDateTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      shuffledReplayDateRange_call method_call = new shuffledReplayDateRange_call(assetId, variables, proportionShuffling, windowSize, intraWindow, offsetting, attribute, startDateTime, endDateTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shuffledReplayDateRange_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String assetId;
      private List<String> variables;
      private double proportionShuffling;
      private int windowSize;
      private boolean intraWindow;
      private int offsetting;
      private int attribute;
      private long startDateTime;
      private long endDateTime;
      public shuffledReplayDateRange_call(String assetId, List<String> variables, double proportionShuffling, int windowSize, boolean intraWindow, int offsetting, int attribute, long startDateTime, long endDateTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.assetId = assetId;
        this.variables = variables;
        this.proportionShuffling = proportionShuffling;
        this.windowSize = windowSize;
        this.intraWindow = intraWindow;
        this.offsetting = offsetting;
        this.attribute = attribute;
        this.startDateTime = startDateTime;
        this.endDateTime = endDateTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shuffledReplayDateRange", org.apache.thrift.protocol.TMessageType.CALL, 0));
        shuffledReplayDateRange_args args = new shuffledReplayDateRange_args();
        args.setAssetId(assetId);
        args.setVariables(variables);
        args.setProportionShuffling(proportionShuffling);
        args.setWindowSize(windowSize);
        args.setIntraWindow(intraWindow);
        args.setOffsetting(offsetting);
        args.setAttribute(attribute);
        args.setStartDateTime(startDateTime);
        args.setEndDateTime(endDateTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,List<Double>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_shuffledReplayDateRange();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("replay", new replay());
      processMap.put("replayToCsv", new replayToCsv());
      processMap.put("shuffledReplay", new shuffledReplay());
      processMap.put("shuffledReplayDateRange", new shuffledReplayDateRange());
      return processMap;
    }

    public static class replay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, replay_args> {
      public replay() {
        super("replay");
      }

      public replay_args getEmptyArgsInstance() {
        return new replay_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public replay_result getResult(I iface, replay_args args) throws org.apache.thrift.TException {
        replay_result result = new replay_result();
        result.success = iface.replay(args.assetId, args.variables, args.startDateTime, args.endDateTime);
        return result;
      }
    }

    public static class replayToCsv<I extends Iface> extends org.apache.thrift.ProcessFunction<I, replayToCsv_args> {
      public replayToCsv() {
        super("replayToCsv");
      }

      public replayToCsv_args getEmptyArgsInstance() {
        return new replayToCsv_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public replayToCsv_result getResult(I iface, replayToCsv_args args) throws org.apache.thrift.TException {
        replayToCsv_result result = new replayToCsv_result();
        result.success = iface.replayToCsv(args.assetId, args.variables, args.startDateTime, args.endDateTime, args.csvFileName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class shuffledReplay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shuffledReplay_args> {
      public shuffledReplay() {
        super("shuffledReplay");
      }

      public shuffledReplay_args getEmptyArgsInstance() {
        return new shuffledReplay_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public shuffledReplay_result getResult(I iface, shuffledReplay_args args) throws org.apache.thrift.TException {
        shuffledReplay_result result = new shuffledReplay_result();
        result.success = iface.shuffledReplay(args.assetId, args.variables, args.proportionShuffling, args.windowSize, args.intraWindow, args.offsetting, args.attribute);
        return result;
      }
    }

    public static class shuffledReplayDateRange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shuffledReplayDateRange_args> {
      public shuffledReplayDateRange() {
        super("shuffledReplayDateRange");
      }

      public shuffledReplayDateRange_args getEmptyArgsInstance() {
        return new shuffledReplayDateRange_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public shuffledReplayDateRange_result getResult(I iface, shuffledReplayDateRange_args args) throws org.apache.thrift.TException {
        shuffledReplayDateRange_result result = new shuffledReplayDateRange_result();
        result.success = iface.shuffledReplayDateRange(args.assetId, args.variables, args.proportionShuffling, args.windowSize, args.intraWindow, args.offsetting, args.attribute, args.startDateTime, args.endDateTime);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("replay", new replay());
      processMap.put("replayToCsv", new replayToCsv());
      processMap.put("shuffledReplay", new shuffledReplay());
      processMap.put("shuffledReplayDateRange", new shuffledReplayDateRange());
      return processMap;
    }

    public static class replay<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, replay_args, Map<String,List<Double>>> {
      public replay() {
        super("replay");
      }

      public replay_args getEmptyArgsInstance() {
        return new replay_args();
      }

      public AsyncMethodCallback<Map<String,List<Double>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,List<Double>>>() { 
          public void onComplete(Map<String,List<Double>> o) {
            replay_result result = new replay_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            replay_result result = new replay_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, replay_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,List<Double>>> resultHandler) throws TException {
        iface.replay(args.assetId, args.variables, args.startDateTime, args.endDateTime,resultHandler);
      }
    }

    public static class replayToCsv<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, replayToCsv_args, Long> {
      public replayToCsv() {
        super("replayToCsv");
      }

      public replayToCsv_args getEmptyArgsInstance() {
        return new replayToCsv_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            replayToCsv_result result = new replayToCsv_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            replayToCsv_result result = new replayToCsv_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, replayToCsv_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.replayToCsv(args.assetId, args.variables, args.startDateTime, args.endDateTime, args.csvFileName,resultHandler);
      }
    }

    public static class shuffledReplay<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, shuffledReplay_args, Map<String,List<Double>>> {
      public shuffledReplay() {
        super("shuffledReplay");
      }

      public shuffledReplay_args getEmptyArgsInstance() {
        return new shuffledReplay_args();
      }

      public AsyncMethodCallback<Map<String,List<Double>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,List<Double>>>() { 
          public void onComplete(Map<String,List<Double>> o) {
            shuffledReplay_result result = new shuffledReplay_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            shuffledReplay_result result = new shuffledReplay_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, shuffledReplay_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,List<Double>>> resultHandler) throws TException {
        iface.shuffledReplay(args.assetId, args.variables, args.proportionShuffling, args.windowSize, args.intraWindow, args.offsetting, args.attribute,resultHandler);
      }
    }

    public static class shuffledReplayDateRange<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, shuffledReplayDateRange_args, Map<String,List<Double>>> {
      public shuffledReplayDateRange() {
        super("shuffledReplayDateRange");
      }

      public shuffledReplayDateRange_args getEmptyArgsInstance() {
        return new shuffledReplayDateRange_args();
      }

      public AsyncMethodCallback<Map<String,List<Double>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,List<Double>>>() { 
          public void onComplete(Map<String,List<Double>> o) {
            shuffledReplayDateRange_result result = new shuffledReplayDateRange_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            shuffledReplayDateRange_result result = new shuffledReplayDateRange_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, shuffledReplayDateRange_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,List<Double>>> resultHandler) throws TException {
        iface.shuffledReplayDateRange(args.assetId, args.variables, args.proportionShuffling, args.windowSize, args.intraWindow, args.offsetting, args.attribute, args.startDateTime, args.endDateTime,resultHandler);
      }
    }

  }

  public static class replay_args implements org.apache.thrift.TBase<replay_args, replay_args._Fields>, java.io.Serializable, Cloneable, Comparable<replay_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replay_args");

    private static final org.apache.thrift.protocol.TField ASSET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("assetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VARIABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("variables", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField START_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startDateTime", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endDateTime", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replay_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replay_argsTupleSchemeFactory());
    }

    public String assetId; // required
    public List<String> variables; // required
    public long startDateTime; // required
    public long endDateTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ASSET_ID((short)1, "assetId"),
      VARIABLES((short)2, "variables"),
      START_DATE_TIME((short)3, "startDateTime"),
      END_DATE_TIME((short)4, "endDateTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ASSET_ID
            return ASSET_ID;
          case 2: // VARIABLES
            return VARIABLES;
          case 3: // START_DATE_TIME
            return START_DATE_TIME;
          case 4: // END_DATE_TIME
            return END_DATE_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTDATETIME_ISSET_ID = 0;
    private static final int __ENDDATETIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ASSET_ID, new org.apache.thrift.meta_data.FieldMetaData("assetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VARIABLES, new org.apache.thrift.meta_data.FieldMetaData("variables", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("startDateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("endDateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replay_args.class, metaDataMap);
    }

    public replay_args() {
    }

    public replay_args(
      String assetId,
      List<String> variables,
      long startDateTime,
      long endDateTime)
    {
      this();
      this.assetId = assetId;
      this.variables = variables;
      this.startDateTime = startDateTime;
      setStartDateTimeIsSet(true);
      this.endDateTime = endDateTime;
      setEndDateTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replay_args(replay_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAssetId()) {
        this.assetId = other.assetId;
      }
      if (other.isSetVariables()) {
        List<String> __this__variables = new ArrayList<String>(other.variables);
        this.variables = __this__variables;
      }
      this.startDateTime = other.startDateTime;
      this.endDateTime = other.endDateTime;
    }

    public replay_args deepCopy() {
      return new replay_args(this);
    }

    @Override
    public void clear() {
      this.assetId = null;
      this.variables = null;
      setStartDateTimeIsSet(false);
      this.startDateTime = 0;
      setEndDateTimeIsSet(false);
      this.endDateTime = 0;
    }

    public String getAssetId() {
      return this.assetId;
    }

    public replay_args setAssetId(String assetId) {
      this.assetId = assetId;
      return this;
    }

    public void unsetAssetId() {
      this.assetId = null;
    }

    /** Returns true if field assetId is set (has been assigned a value) and false otherwise */
    public boolean isSetAssetId() {
      return this.assetId != null;
    }

    public void setAssetIdIsSet(boolean value) {
      if (!value) {
        this.assetId = null;
      }
    }

    public int getVariablesSize() {
      return (this.variables == null) ? 0 : this.variables.size();
    }

    public java.util.Iterator<String> getVariablesIterator() {
      return (this.variables == null) ? null : this.variables.iterator();
    }

    public void addToVariables(String elem) {
      if (this.variables == null) {
        this.variables = new ArrayList<String>();
      }
      this.variables.add(elem);
    }

    public List<String> getVariables() {
      return this.variables;
    }

    public replay_args setVariables(List<String> variables) {
      this.variables = variables;
      return this;
    }

    public void unsetVariables() {
      this.variables = null;
    }

    /** Returns true if field variables is set (has been assigned a value) and false otherwise */
    public boolean isSetVariables() {
      return this.variables != null;
    }

    public void setVariablesIsSet(boolean value) {
      if (!value) {
        this.variables = null;
      }
    }

    public long getStartDateTime() {
      return this.startDateTime;
    }

    public replay_args setStartDateTime(long startDateTime) {
      this.startDateTime = startDateTime;
      setStartDateTimeIsSet(true);
      return this;
    }

    public void unsetStartDateTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTDATETIME_ISSET_ID);
    }

    /** Returns true if field startDateTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartDateTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTDATETIME_ISSET_ID);
    }

    public void setStartDateTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTDATETIME_ISSET_ID, value);
    }

    public long getEndDateTime() {
      return this.endDateTime;
    }

    public replay_args setEndDateTime(long endDateTime) {
      this.endDateTime = endDateTime;
      setEndDateTimeIsSet(true);
      return this;
    }

    public void unsetEndDateTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATETIME_ISSET_ID);
    }

    /** Returns true if field endDateTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndDateTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATETIME_ISSET_ID);
    }

    public void setEndDateTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATETIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ASSET_ID:
        if (value == null) {
          unsetAssetId();
        } else {
          setAssetId((String)value);
        }
        break;

      case VARIABLES:
        if (value == null) {
          unsetVariables();
        } else {
          setVariables((List<String>)value);
        }
        break;

      case START_DATE_TIME:
        if (value == null) {
          unsetStartDateTime();
        } else {
          setStartDateTime((Long)value);
        }
        break;

      case END_DATE_TIME:
        if (value == null) {
          unsetEndDateTime();
        } else {
          setEndDateTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ASSET_ID:
        return getAssetId();

      case VARIABLES:
        return getVariables();

      case START_DATE_TIME:
        return Long.valueOf(getStartDateTime());

      case END_DATE_TIME:
        return Long.valueOf(getEndDateTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ASSET_ID:
        return isSetAssetId();
      case VARIABLES:
        return isSetVariables();
      case START_DATE_TIME:
        return isSetStartDateTime();
      case END_DATE_TIME:
        return isSetEndDateTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replay_args)
        return this.equals((replay_args)that);
      return false;
    }

    public boolean equals(replay_args that) {
      if (that == null)
        return false;

      boolean this_present_assetId = true && this.isSetAssetId();
      boolean that_present_assetId = true && that.isSetAssetId();
      if (this_present_assetId || that_present_assetId) {
        if (!(this_present_assetId && that_present_assetId))
          return false;
        if (!this.assetId.equals(that.assetId))
          return false;
      }

      boolean this_present_variables = true && this.isSetVariables();
      boolean that_present_variables = true && that.isSetVariables();
      if (this_present_variables || that_present_variables) {
        if (!(this_present_variables && that_present_variables))
          return false;
        if (!this.variables.equals(that.variables))
          return false;
      }

      boolean this_present_startDateTime = true;
      boolean that_present_startDateTime = true;
      if (this_present_startDateTime || that_present_startDateTime) {
        if (!(this_present_startDateTime && that_present_startDateTime))
          return false;
        if (this.startDateTime != that.startDateTime)
          return false;
      }

      boolean this_present_endDateTime = true;
      boolean that_present_endDateTime = true;
      if (this_present_endDateTime || that_present_endDateTime) {
        if (!(this_present_endDateTime && that_present_endDateTime))
          return false;
        if (this.endDateTime != that.endDateTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(replay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAssetId()).compareTo(other.isSetAssetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAssetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assetId, other.assetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVariables()).compareTo(other.isSetVariables());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVariables()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variables, other.variables);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartDateTime()).compareTo(other.isSetStartDateTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartDateTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDateTime, other.startDateTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndDateTime()).compareTo(other.isSetEndDateTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndDateTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDateTime, other.endDateTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replay_args(");
      boolean first = true;

      sb.append("assetId:");
      if (this.assetId == null) {
        sb.append("null");
      } else {
        sb.append(this.assetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("variables:");
      if (this.variables == null) {
        sb.append("null");
      } else {
        sb.append(this.variables);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startDateTime:");
      sb.append(this.startDateTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endDateTime:");
      sb.append(this.endDateTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replay_argsStandardSchemeFactory implements SchemeFactory {
      public replay_argsStandardScheme getScheme() {
        return new replay_argsStandardScheme();
      }
    }

    private static class replay_argsStandardScheme extends StandardScheme<replay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ASSET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.assetId = iprot.readString();
                struct.setAssetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VARIABLES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.variables = new ArrayList<String>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    String _elem2;
                    _elem2 = iprot.readString();
                    struct.variables.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setVariablesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_DATE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startDateTime = iprot.readI64();
                struct.setStartDateTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_DATE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endDateTime = iprot.readI64();
                struct.setEndDateTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.assetId != null) {
          oprot.writeFieldBegin(ASSET_ID_FIELD_DESC);
          oprot.writeString(struct.assetId);
          oprot.writeFieldEnd();
        }
        if (struct.variables != null) {
          oprot.writeFieldBegin(VARIABLES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.variables.size()));
            for (String _iter3 : struct.variables)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.startDateTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.endDateTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replay_argsTupleSchemeFactory implements SchemeFactory {
      public replay_argsTupleScheme getScheme() {
        return new replay_argsTupleScheme();
      }
    }

    private static class replay_argsTupleScheme extends TupleScheme<replay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAssetId()) {
          optionals.set(0);
        }
        if (struct.isSetVariables()) {
          optionals.set(1);
        }
        if (struct.isSetStartDateTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndDateTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAssetId()) {
          oprot.writeString(struct.assetId);
        }
        if (struct.isSetVariables()) {
          {
            oprot.writeI32(struct.variables.size());
            for (String _iter4 : struct.variables)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetStartDateTime()) {
          oprot.writeI64(struct.startDateTime);
        }
        if (struct.isSetEndDateTime()) {
          oprot.writeI64(struct.endDateTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.assetId = iprot.readString();
          struct.setAssetIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.variables = new ArrayList<String>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              String _elem7;
              _elem7 = iprot.readString();
              struct.variables.add(_elem7);
            }
          }
          struct.setVariablesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startDateTime = iprot.readI64();
          struct.setStartDateTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endDateTime = iprot.readI64();
          struct.setEndDateTimeIsSet(true);
        }
      }
    }

  }

  public static class replay_result implements org.apache.thrift.TBase<replay_result, replay_result._Fields>, java.io.Serializable, Cloneable, Comparable<replay_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replay_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replay_resultTupleSchemeFactory());
    }

    public Map<String,List<Double>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replay_result.class, metaDataMap);
    }

    public replay_result() {
    }

    public replay_result(
      Map<String,List<Double>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replay_result(replay_result other) {
      if (other.isSetSuccess()) {
        Map<String,List<Double>> __this__success = new HashMap<String,List<Double>>(other.success.size());
        for (Map.Entry<String, List<Double>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          List<Double> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          List<Double> __this__success_copy_value = new ArrayList<Double>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public replay_result deepCopy() {
      return new replay_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, List<Double> val) {
      if (this.success == null) {
        this.success = new HashMap<String,List<Double>>();
      }
      this.success.put(key, val);
    }

    public Map<String,List<Double>> getSuccess() {
      return this.success;
    }

    public replay_result setSuccess(Map<String,List<Double>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,List<Double>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replay_result)
        return this.equals((replay_result)that);
      return false;
    }

    public boolean equals(replay_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(replay_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replay_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replay_resultStandardSchemeFactory implements SchemeFactory {
      public replay_resultStandardScheme getScheme() {
        return new replay_resultStandardScheme();
      }
    }

    private static class replay_resultStandardScheme extends StandardScheme<replay_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                  struct.success = new HashMap<String,List<Double>>(2*_map8.size);
                  for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                  {
                    String _key10;
                    List<Double> _val11;
                    _key10 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                      _val11 = new ArrayList<Double>(_list12.size);
                      for (int _i13 = 0; _i13 < _list12.size; ++_i13)
                      {
                        double _elem14;
                        _elem14 = iprot.readDouble();
                        _val11.add(_elem14);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key10, _val11);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replay_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<String, List<Double>> _iter15 : struct.success.entrySet())
            {
              oprot.writeString(_iter15.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter15.getValue().size()));
                for (double _iter16 : _iter15.getValue())
                {
                  oprot.writeDouble(_iter16);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replay_resultTupleSchemeFactory implements SchemeFactory {
      public replay_resultTupleScheme getScheme() {
        return new replay_resultTupleScheme();
      }
    }

    private static class replay_resultTupleScheme extends TupleScheme<replay_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, List<Double>> _iter17 : struct.success.entrySet())
            {
              oprot.writeString(_iter17.getKey());
              {
                oprot.writeI32(_iter17.getValue().size());
                for (double _iter18 : _iter17.getValue())
                {
                  oprot.writeDouble(_iter18);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map19 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new HashMap<String,List<Double>>(2*_map19.size);
            for (int _i20 = 0; _i20 < _map19.size; ++_i20)
            {
              String _key21;
              List<Double> _val22;
              _key21 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _val22 = new ArrayList<Double>(_list23.size);
                for (int _i24 = 0; _i24 < _list23.size; ++_i24)
                {
                  double _elem25;
                  _elem25 = iprot.readDouble();
                  _val22.add(_elem25);
                }
              }
              struct.success.put(_key21, _val22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class replayToCsv_args implements org.apache.thrift.TBase<replayToCsv_args, replayToCsv_args._Fields>, java.io.Serializable, Cloneable, Comparable<replayToCsv_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replayToCsv_args");

    private static final org.apache.thrift.protocol.TField ASSET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("assetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VARIABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("variables", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField START_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startDateTime", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endDateTime", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField CSV_FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("csvFileName", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replayToCsv_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replayToCsv_argsTupleSchemeFactory());
    }

    public String assetId; // required
    public List<String> variables; // required
    public long startDateTime; // required
    public long endDateTime; // required
    public String csvFileName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ASSET_ID((short)1, "assetId"),
      VARIABLES((short)2, "variables"),
      START_DATE_TIME((short)3, "startDateTime"),
      END_DATE_TIME((short)4, "endDateTime"),
      CSV_FILE_NAME((short)5, "csvFileName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ASSET_ID
            return ASSET_ID;
          case 2: // VARIABLES
            return VARIABLES;
          case 3: // START_DATE_TIME
            return START_DATE_TIME;
          case 4: // END_DATE_TIME
            return END_DATE_TIME;
          case 5: // CSV_FILE_NAME
            return CSV_FILE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTDATETIME_ISSET_ID = 0;
    private static final int __ENDDATETIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ASSET_ID, new org.apache.thrift.meta_data.FieldMetaData("assetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VARIABLES, new org.apache.thrift.meta_data.FieldMetaData("variables", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.START_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("startDateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("endDateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CSV_FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("csvFileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replayToCsv_args.class, metaDataMap);
    }

    public replayToCsv_args() {
    }

    public replayToCsv_args(
      String assetId,
      List<String> variables,
      long startDateTime,
      long endDateTime,
      String csvFileName)
    {
      this();
      this.assetId = assetId;
      this.variables = variables;
      this.startDateTime = startDateTime;
      setStartDateTimeIsSet(true);
      this.endDateTime = endDateTime;
      setEndDateTimeIsSet(true);
      this.csvFileName = csvFileName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replayToCsv_args(replayToCsv_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAssetId()) {
        this.assetId = other.assetId;
      }
      if (other.isSetVariables()) {
        List<String> __this__variables = new ArrayList<String>(other.variables);
        this.variables = __this__variables;
      }
      this.startDateTime = other.startDateTime;
      this.endDateTime = other.endDateTime;
      if (other.isSetCsvFileName()) {
        this.csvFileName = other.csvFileName;
      }
    }

    public replayToCsv_args deepCopy() {
      return new replayToCsv_args(this);
    }

    @Override
    public void clear() {
      this.assetId = null;
      this.variables = null;
      setStartDateTimeIsSet(false);
      this.startDateTime = 0;
      setEndDateTimeIsSet(false);
      this.endDateTime = 0;
      this.csvFileName = null;
    }

    public String getAssetId() {
      return this.assetId;
    }

    public replayToCsv_args setAssetId(String assetId) {
      this.assetId = assetId;
      return this;
    }

    public void unsetAssetId() {
      this.assetId = null;
    }

    /** Returns true if field assetId is set (has been assigned a value) and false otherwise */
    public boolean isSetAssetId() {
      return this.assetId != null;
    }

    public void setAssetIdIsSet(boolean value) {
      if (!value) {
        this.assetId = null;
      }
    }

    public int getVariablesSize() {
      return (this.variables == null) ? 0 : this.variables.size();
    }

    public java.util.Iterator<String> getVariablesIterator() {
      return (this.variables == null) ? null : this.variables.iterator();
    }

    public void addToVariables(String elem) {
      if (this.variables == null) {
        this.variables = new ArrayList<String>();
      }
      this.variables.add(elem);
    }

    public List<String> getVariables() {
      return this.variables;
    }

    public replayToCsv_args setVariables(List<String> variables) {
      this.variables = variables;
      return this;
    }

    public void unsetVariables() {
      this.variables = null;
    }

    /** Returns true if field variables is set (has been assigned a value) and false otherwise */
    public boolean isSetVariables() {
      return this.variables != null;
    }

    public void setVariablesIsSet(boolean value) {
      if (!value) {
        this.variables = null;
      }
    }

    public long getStartDateTime() {
      return this.startDateTime;
    }

    public replayToCsv_args setStartDateTime(long startDateTime) {
      this.startDateTime = startDateTime;
      setStartDateTimeIsSet(true);
      return this;
    }

    public void unsetStartDateTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTDATETIME_ISSET_ID);
    }

    /** Returns true if field startDateTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartDateTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTDATETIME_ISSET_ID);
    }

    public void setStartDateTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTDATETIME_ISSET_ID, value);
    }

    public long getEndDateTime() {
      return this.endDateTime;
    }

    public replayToCsv_args setEndDateTime(long endDateTime) {
      this.endDateTime = endDateTime;
      setEndDateTimeIsSet(true);
      return this;
    }

    public void unsetEndDateTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATETIME_ISSET_ID);
    }

    /** Returns true if field endDateTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndDateTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATETIME_ISSET_ID);
    }

    public void setEndDateTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATETIME_ISSET_ID, value);
    }

    public String getCsvFileName() {
      return this.csvFileName;
    }

    public replayToCsv_args setCsvFileName(String csvFileName) {
      this.csvFileName = csvFileName;
      return this;
    }

    public void unsetCsvFileName() {
      this.csvFileName = null;
    }

    /** Returns true if field csvFileName is set (has been assigned a value) and false otherwise */
    public boolean isSetCsvFileName() {
      return this.csvFileName != null;
    }

    public void setCsvFileNameIsSet(boolean value) {
      if (!value) {
        this.csvFileName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ASSET_ID:
        if (value == null) {
          unsetAssetId();
        } else {
          setAssetId((String)value);
        }
        break;

      case VARIABLES:
        if (value == null) {
          unsetVariables();
        } else {
          setVariables((List<String>)value);
        }
        break;

      case START_DATE_TIME:
        if (value == null) {
          unsetStartDateTime();
        } else {
          setStartDateTime((Long)value);
        }
        break;

      case END_DATE_TIME:
        if (value == null) {
          unsetEndDateTime();
        } else {
          setEndDateTime((Long)value);
        }
        break;

      case CSV_FILE_NAME:
        if (value == null) {
          unsetCsvFileName();
        } else {
          setCsvFileName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ASSET_ID:
        return getAssetId();

      case VARIABLES:
        return getVariables();

      case START_DATE_TIME:
        return Long.valueOf(getStartDateTime());

      case END_DATE_TIME:
        return Long.valueOf(getEndDateTime());

      case CSV_FILE_NAME:
        return getCsvFileName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ASSET_ID:
        return isSetAssetId();
      case VARIABLES:
        return isSetVariables();
      case START_DATE_TIME:
        return isSetStartDateTime();
      case END_DATE_TIME:
        return isSetEndDateTime();
      case CSV_FILE_NAME:
        return isSetCsvFileName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replayToCsv_args)
        return this.equals((replayToCsv_args)that);
      return false;
    }

    public boolean equals(replayToCsv_args that) {
      if (that == null)
        return false;

      boolean this_present_assetId = true && this.isSetAssetId();
      boolean that_present_assetId = true && that.isSetAssetId();
      if (this_present_assetId || that_present_assetId) {
        if (!(this_present_assetId && that_present_assetId))
          return false;
        if (!this.assetId.equals(that.assetId))
          return false;
      }

      boolean this_present_variables = true && this.isSetVariables();
      boolean that_present_variables = true && that.isSetVariables();
      if (this_present_variables || that_present_variables) {
        if (!(this_present_variables && that_present_variables))
          return false;
        if (!this.variables.equals(that.variables))
          return false;
      }

      boolean this_present_startDateTime = true;
      boolean that_present_startDateTime = true;
      if (this_present_startDateTime || that_present_startDateTime) {
        if (!(this_present_startDateTime && that_present_startDateTime))
          return false;
        if (this.startDateTime != that.startDateTime)
          return false;
      }

      boolean this_present_endDateTime = true;
      boolean that_present_endDateTime = true;
      if (this_present_endDateTime || that_present_endDateTime) {
        if (!(this_present_endDateTime && that_present_endDateTime))
          return false;
        if (this.endDateTime != that.endDateTime)
          return false;
      }

      boolean this_present_csvFileName = true && this.isSetCsvFileName();
      boolean that_present_csvFileName = true && that.isSetCsvFileName();
      if (this_present_csvFileName || that_present_csvFileName) {
        if (!(this_present_csvFileName && that_present_csvFileName))
          return false;
        if (!this.csvFileName.equals(that.csvFileName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(replayToCsv_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAssetId()).compareTo(other.isSetAssetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAssetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assetId, other.assetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVariables()).compareTo(other.isSetVariables());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVariables()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variables, other.variables);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartDateTime()).compareTo(other.isSetStartDateTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartDateTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDateTime, other.startDateTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndDateTime()).compareTo(other.isSetEndDateTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndDateTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDateTime, other.endDateTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCsvFileName()).compareTo(other.isSetCsvFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCsvFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csvFileName, other.csvFileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replayToCsv_args(");
      boolean first = true;

      sb.append("assetId:");
      if (this.assetId == null) {
        sb.append("null");
      } else {
        sb.append(this.assetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("variables:");
      if (this.variables == null) {
        sb.append("null");
      } else {
        sb.append(this.variables);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startDateTime:");
      sb.append(this.startDateTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endDateTime:");
      sb.append(this.endDateTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("csvFileName:");
      if (this.csvFileName == null) {
        sb.append("null");
      } else {
        sb.append(this.csvFileName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replayToCsv_argsStandardSchemeFactory implements SchemeFactory {
      public replayToCsv_argsStandardScheme getScheme() {
        return new replayToCsv_argsStandardScheme();
      }
    }

    private static class replayToCsv_argsStandardScheme extends StandardScheme<replayToCsv_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replayToCsv_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ASSET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.assetId = iprot.readString();
                struct.setAssetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VARIABLES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                  struct.variables = new ArrayList<String>(_list26.size);
                  for (int _i27 = 0; _i27 < _list26.size; ++_i27)
                  {
                    String _elem28;
                    _elem28 = iprot.readString();
                    struct.variables.add(_elem28);
                  }
                  iprot.readListEnd();
                }
                struct.setVariablesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_DATE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startDateTime = iprot.readI64();
                struct.setStartDateTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_DATE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endDateTime = iprot.readI64();
                struct.setEndDateTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CSV_FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.csvFileName = iprot.readString();
                struct.setCsvFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replayToCsv_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.assetId != null) {
          oprot.writeFieldBegin(ASSET_ID_FIELD_DESC);
          oprot.writeString(struct.assetId);
          oprot.writeFieldEnd();
        }
        if (struct.variables != null) {
          oprot.writeFieldBegin(VARIABLES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.variables.size()));
            for (String _iter29 : struct.variables)
            {
              oprot.writeString(_iter29);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.startDateTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.endDateTime);
        oprot.writeFieldEnd();
        if (struct.csvFileName != null) {
          oprot.writeFieldBegin(CSV_FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.csvFileName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replayToCsv_argsTupleSchemeFactory implements SchemeFactory {
      public replayToCsv_argsTupleScheme getScheme() {
        return new replayToCsv_argsTupleScheme();
      }
    }

    private static class replayToCsv_argsTupleScheme extends TupleScheme<replayToCsv_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replayToCsv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAssetId()) {
          optionals.set(0);
        }
        if (struct.isSetVariables()) {
          optionals.set(1);
        }
        if (struct.isSetStartDateTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndDateTime()) {
          optionals.set(3);
        }
        if (struct.isSetCsvFileName()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetAssetId()) {
          oprot.writeString(struct.assetId);
        }
        if (struct.isSetVariables()) {
          {
            oprot.writeI32(struct.variables.size());
            for (String _iter30 : struct.variables)
            {
              oprot.writeString(_iter30);
            }
          }
        }
        if (struct.isSetStartDateTime()) {
          oprot.writeI64(struct.startDateTime);
        }
        if (struct.isSetEndDateTime()) {
          oprot.writeI64(struct.endDateTime);
        }
        if (struct.isSetCsvFileName()) {
          oprot.writeString(struct.csvFileName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replayToCsv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.assetId = iprot.readString();
          struct.setAssetIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.variables = new ArrayList<String>(_list31.size);
            for (int _i32 = 0; _i32 < _list31.size; ++_i32)
            {
              String _elem33;
              _elem33 = iprot.readString();
              struct.variables.add(_elem33);
            }
          }
          struct.setVariablesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startDateTime = iprot.readI64();
          struct.setStartDateTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endDateTime = iprot.readI64();
          struct.setEndDateTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.csvFileName = iprot.readString();
          struct.setCsvFileNameIsSet(true);
        }
      }
    }

  }

  public static class replayToCsv_result implements org.apache.thrift.TBase<replayToCsv_result, replayToCsv_result._Fields>, java.io.Serializable, Cloneable, Comparable<replayToCsv_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replayToCsv_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replayToCsv_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replayToCsv_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replayToCsv_result.class, metaDataMap);
    }

    public replayToCsv_result() {
    }

    public replayToCsv_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replayToCsv_result(replayToCsv_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public replayToCsv_result deepCopy() {
      return new replayToCsv_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public replayToCsv_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replayToCsv_result)
        return this.equals((replayToCsv_result)that);
      return false;
    }

    public boolean equals(replayToCsv_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(replayToCsv_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replayToCsv_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replayToCsv_resultStandardSchemeFactory implements SchemeFactory {
      public replayToCsv_resultStandardScheme getScheme() {
        return new replayToCsv_resultStandardScheme();
      }
    }

    private static class replayToCsv_resultStandardScheme extends StandardScheme<replayToCsv_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replayToCsv_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replayToCsv_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replayToCsv_resultTupleSchemeFactory implements SchemeFactory {
      public replayToCsv_resultTupleScheme getScheme() {
        return new replayToCsv_resultTupleScheme();
      }
    }

    private static class replayToCsv_resultTupleScheme extends TupleScheme<replayToCsv_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replayToCsv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replayToCsv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class shuffledReplay_args implements org.apache.thrift.TBase<shuffledReplay_args, shuffledReplay_args._Fields>, java.io.Serializable, Cloneable, Comparable<shuffledReplay_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shuffledReplay_args");

    private static final org.apache.thrift.protocol.TField ASSET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("assetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VARIABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("variables", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField PROPORTION_SHUFFLING_FIELD_DESC = new org.apache.thrift.protocol.TField("proportionShuffling", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField WINDOW_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("windowSize", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField INTRA_WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("intraWindow", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField OFFSETTING_FIELD_DESC = new org.apache.thrift.protocol.TField("offsetting", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shuffledReplay_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shuffledReplay_argsTupleSchemeFactory());
    }

    public String assetId; // required
    public List<String> variables; // required
    public double proportionShuffling; // required
    public int windowSize; // required
    public boolean intraWindow; // required
    public int offsetting; // required
    public int attribute; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ASSET_ID((short)1, "assetId"),
      VARIABLES((short)2, "variables"),
      PROPORTION_SHUFFLING((short)3, "proportionShuffling"),
      WINDOW_SIZE((short)4, "windowSize"),
      INTRA_WINDOW((short)5, "intraWindow"),
      OFFSETTING((short)6, "offsetting"),
      ATTRIBUTE((short)7, "attribute");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ASSET_ID
            return ASSET_ID;
          case 2: // VARIABLES
            return VARIABLES;
          case 3: // PROPORTION_SHUFFLING
            return PROPORTION_SHUFFLING;
          case 4: // WINDOW_SIZE
            return WINDOW_SIZE;
          case 5: // INTRA_WINDOW
            return INTRA_WINDOW;
          case 6: // OFFSETTING
            return OFFSETTING;
          case 7: // ATTRIBUTE
            return ATTRIBUTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROPORTIONSHUFFLING_ISSET_ID = 0;
    private static final int __WINDOWSIZE_ISSET_ID = 1;
    private static final int __INTRAWINDOW_ISSET_ID = 2;
    private static final int __OFFSETTING_ISSET_ID = 3;
    private static final int __ATTRIBUTE_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ASSET_ID, new org.apache.thrift.meta_data.FieldMetaData("assetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VARIABLES, new org.apache.thrift.meta_data.FieldMetaData("variables", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.PROPORTION_SHUFFLING, new org.apache.thrift.meta_data.FieldMetaData("proportionShuffling", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.WINDOW_SIZE, new org.apache.thrift.meta_data.FieldMetaData("windowSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.INTRA_WINDOW, new org.apache.thrift.meta_data.FieldMetaData("intraWindow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.OFFSETTING, new org.apache.thrift.meta_data.FieldMetaData("offsetting", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ATTRIBUTE, new org.apache.thrift.meta_data.FieldMetaData("attribute", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shuffledReplay_args.class, metaDataMap);
    }

    public shuffledReplay_args() {
    }

    public shuffledReplay_args(
      String assetId,
      List<String> variables,
      double proportionShuffling,
      int windowSize,
      boolean intraWindow,
      int offsetting,
      int attribute)
    {
      this();
      this.assetId = assetId;
      this.variables = variables;
      this.proportionShuffling = proportionShuffling;
      setProportionShufflingIsSet(true);
      this.windowSize = windowSize;
      setWindowSizeIsSet(true);
      this.intraWindow = intraWindow;
      setIntraWindowIsSet(true);
      this.offsetting = offsetting;
      setOffsettingIsSet(true);
      this.attribute = attribute;
      setAttributeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shuffledReplay_args(shuffledReplay_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAssetId()) {
        this.assetId = other.assetId;
      }
      if (other.isSetVariables()) {
        List<String> __this__variables = new ArrayList<String>(other.variables);
        this.variables = __this__variables;
      }
      this.proportionShuffling = other.proportionShuffling;
      this.windowSize = other.windowSize;
      this.intraWindow = other.intraWindow;
      this.offsetting = other.offsetting;
      this.attribute = other.attribute;
    }

    public shuffledReplay_args deepCopy() {
      return new shuffledReplay_args(this);
    }

    @Override
    public void clear() {
      this.assetId = null;
      this.variables = null;
      setProportionShufflingIsSet(false);
      this.proportionShuffling = 0.0;
      setWindowSizeIsSet(false);
      this.windowSize = 0;
      setIntraWindowIsSet(false);
      this.intraWindow = false;
      setOffsettingIsSet(false);
      this.offsetting = 0;
      setAttributeIsSet(false);
      this.attribute = 0;
    }

    public String getAssetId() {
      return this.assetId;
    }

    public shuffledReplay_args setAssetId(String assetId) {
      this.assetId = assetId;
      return this;
    }

    public void unsetAssetId() {
      this.assetId = null;
    }

    /** Returns true if field assetId is set (has been assigned a value) and false otherwise */
    public boolean isSetAssetId() {
      return this.assetId != null;
    }

    public void setAssetIdIsSet(boolean value) {
      if (!value) {
        this.assetId = null;
      }
    }

    public int getVariablesSize() {
      return (this.variables == null) ? 0 : this.variables.size();
    }

    public java.util.Iterator<String> getVariablesIterator() {
      return (this.variables == null) ? null : this.variables.iterator();
    }

    public void addToVariables(String elem) {
      if (this.variables == null) {
        this.variables = new ArrayList<String>();
      }
      this.variables.add(elem);
    }

    public List<String> getVariables() {
      return this.variables;
    }

    public shuffledReplay_args setVariables(List<String> variables) {
      this.variables = variables;
      return this;
    }

    public void unsetVariables() {
      this.variables = null;
    }

    /** Returns true if field variables is set (has been assigned a value) and false otherwise */
    public boolean isSetVariables() {
      return this.variables != null;
    }

    public void setVariablesIsSet(boolean value) {
      if (!value) {
        this.variables = null;
      }
    }

    public double getProportionShuffling() {
      return this.proportionShuffling;
    }

    public shuffledReplay_args setProportionShuffling(double proportionShuffling) {
      this.proportionShuffling = proportionShuffling;
      setProportionShufflingIsSet(true);
      return this;
    }

    public void unsetProportionShuffling() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROPORTIONSHUFFLING_ISSET_ID);
    }

    /** Returns true if field proportionShuffling is set (has been assigned a value) and false otherwise */
    public boolean isSetProportionShuffling() {
      return EncodingUtils.testBit(__isset_bitfield, __PROPORTIONSHUFFLING_ISSET_ID);
    }

    public void setProportionShufflingIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROPORTIONSHUFFLING_ISSET_ID, value);
    }

    public int getWindowSize() {
      return this.windowSize;
    }

    public shuffledReplay_args setWindowSize(int windowSize) {
      this.windowSize = windowSize;
      setWindowSizeIsSet(true);
      return this;
    }

    public void unsetWindowSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINDOWSIZE_ISSET_ID);
    }

    /** Returns true if field windowSize is set (has been assigned a value) and false otherwise */
    public boolean isSetWindowSize() {
      return EncodingUtils.testBit(__isset_bitfield, __WINDOWSIZE_ISSET_ID);
    }

    public void setWindowSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINDOWSIZE_ISSET_ID, value);
    }

    public boolean isIntraWindow() {
      return this.intraWindow;
    }

    public shuffledReplay_args setIntraWindow(boolean intraWindow) {
      this.intraWindow = intraWindow;
      setIntraWindowIsSet(true);
      return this;
    }

    public void unsetIntraWindow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTRAWINDOW_ISSET_ID);
    }

    /** Returns true if field intraWindow is set (has been assigned a value) and false otherwise */
    public boolean isSetIntraWindow() {
      return EncodingUtils.testBit(__isset_bitfield, __INTRAWINDOW_ISSET_ID);
    }

    public void setIntraWindowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTRAWINDOW_ISSET_ID, value);
    }

    public int getOffsetting() {
      return this.offsetting;
    }

    public shuffledReplay_args setOffsetting(int offsetting) {
      this.offsetting = offsetting;
      setOffsettingIsSet(true);
      return this;
    }

    public void unsetOffsetting() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSETTING_ISSET_ID);
    }

    /** Returns true if field offsetting is set (has been assigned a value) and false otherwise */
    public boolean isSetOffsetting() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSETTING_ISSET_ID);
    }

    public void setOffsettingIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSETTING_ISSET_ID, value);
    }

    public int getAttribute() {
      return this.attribute;
    }

    public shuffledReplay_args setAttribute(int attribute) {
      this.attribute = attribute;
      setAttributeIsSet(true);
      return this;
    }

    public void unsetAttribute() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATTRIBUTE_ISSET_ID);
    }

    /** Returns true if field attribute is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute() {
      return EncodingUtils.testBit(__isset_bitfield, __ATTRIBUTE_ISSET_ID);
    }

    public void setAttributeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATTRIBUTE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ASSET_ID:
        if (value == null) {
          unsetAssetId();
        } else {
          setAssetId((String)value);
        }
        break;

      case VARIABLES:
        if (value == null) {
          unsetVariables();
        } else {
          setVariables((List<String>)value);
        }
        break;

      case PROPORTION_SHUFFLING:
        if (value == null) {
          unsetProportionShuffling();
        } else {
          setProportionShuffling((Double)value);
        }
        break;

      case WINDOW_SIZE:
        if (value == null) {
          unsetWindowSize();
        } else {
          setWindowSize((Integer)value);
        }
        break;

      case INTRA_WINDOW:
        if (value == null) {
          unsetIntraWindow();
        } else {
          setIntraWindow((Boolean)value);
        }
        break;

      case OFFSETTING:
        if (value == null) {
          unsetOffsetting();
        } else {
          setOffsetting((Integer)value);
        }
        break;

      case ATTRIBUTE:
        if (value == null) {
          unsetAttribute();
        } else {
          setAttribute((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ASSET_ID:
        return getAssetId();

      case VARIABLES:
        return getVariables();

      case PROPORTION_SHUFFLING:
        return Double.valueOf(getProportionShuffling());

      case WINDOW_SIZE:
        return Integer.valueOf(getWindowSize());

      case INTRA_WINDOW:
        return Boolean.valueOf(isIntraWindow());

      case OFFSETTING:
        return Integer.valueOf(getOffsetting());

      case ATTRIBUTE:
        return Integer.valueOf(getAttribute());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ASSET_ID:
        return isSetAssetId();
      case VARIABLES:
        return isSetVariables();
      case PROPORTION_SHUFFLING:
        return isSetProportionShuffling();
      case WINDOW_SIZE:
        return isSetWindowSize();
      case INTRA_WINDOW:
        return isSetIntraWindow();
      case OFFSETTING:
        return isSetOffsetting();
      case ATTRIBUTE:
        return isSetAttribute();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shuffledReplay_args)
        return this.equals((shuffledReplay_args)that);
      return false;
    }

    public boolean equals(shuffledReplay_args that) {
      if (that == null)
        return false;

      boolean this_present_assetId = true && this.isSetAssetId();
      boolean that_present_assetId = true && that.isSetAssetId();
      if (this_present_assetId || that_present_assetId) {
        if (!(this_present_assetId && that_present_assetId))
          return false;
        if (!this.assetId.equals(that.assetId))
          return false;
      }

      boolean this_present_variables = true && this.isSetVariables();
      boolean that_present_variables = true && that.isSetVariables();
      if (this_present_variables || that_present_variables) {
        if (!(this_present_variables && that_present_variables))
          return false;
        if (!this.variables.equals(that.variables))
          return false;
      }

      boolean this_present_proportionShuffling = true;
      boolean that_present_proportionShuffling = true;
      if (this_present_proportionShuffling || that_present_proportionShuffling) {
        if (!(this_present_proportionShuffling && that_present_proportionShuffling))
          return false;
        if (this.proportionShuffling != that.proportionShuffling)
          return false;
      }

      boolean this_present_windowSize = true;
      boolean that_present_windowSize = true;
      if (this_present_windowSize || that_present_windowSize) {
        if (!(this_present_windowSize && that_present_windowSize))
          return false;
        if (this.windowSize != that.windowSize)
          return false;
      }

      boolean this_present_intraWindow = true;
      boolean that_present_intraWindow = true;
      if (this_present_intraWindow || that_present_intraWindow) {
        if (!(this_present_intraWindow && that_present_intraWindow))
          return false;
        if (this.intraWindow != that.intraWindow)
          return false;
      }

      boolean this_present_offsetting = true;
      boolean that_present_offsetting = true;
      if (this_present_offsetting || that_present_offsetting) {
        if (!(this_present_offsetting && that_present_offsetting))
          return false;
        if (this.offsetting != that.offsetting)
          return false;
      }

      boolean this_present_attribute = true;
      boolean that_present_attribute = true;
      if (this_present_attribute || that_present_attribute) {
        if (!(this_present_attribute && that_present_attribute))
          return false;
        if (this.attribute != that.attribute)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(shuffledReplay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAssetId()).compareTo(other.isSetAssetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAssetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assetId, other.assetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVariables()).compareTo(other.isSetVariables());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVariables()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variables, other.variables);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProportionShuffling()).compareTo(other.isSetProportionShuffling());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProportionShuffling()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proportionShuffling, other.proportionShuffling);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWindowSize()).compareTo(other.isSetWindowSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindowSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.windowSize, other.windowSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIntraWindow()).compareTo(other.isSetIntraWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIntraWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intraWindow, other.intraWindow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffsetting()).compareTo(other.isSetOffsetting());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffsetting()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offsetting, other.offsetting);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute()).compareTo(other.isSetAttribute());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute, other.attribute);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shuffledReplay_args(");
      boolean first = true;

      sb.append("assetId:");
      if (this.assetId == null) {
        sb.append("null");
      } else {
        sb.append(this.assetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("variables:");
      if (this.variables == null) {
        sb.append("null");
      } else {
        sb.append(this.variables);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("proportionShuffling:");
      sb.append(this.proportionShuffling);
      first = false;
      if (!first) sb.append(", ");
      sb.append("windowSize:");
      sb.append(this.windowSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("intraWindow:");
      sb.append(this.intraWindow);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offsetting:");
      sb.append(this.offsetting);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute:");
      sb.append(this.attribute);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shuffledReplay_argsStandardSchemeFactory implements SchemeFactory {
      public shuffledReplay_argsStandardScheme getScheme() {
        return new shuffledReplay_argsStandardScheme();
      }
    }

    private static class shuffledReplay_argsStandardScheme extends StandardScheme<shuffledReplay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shuffledReplay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ASSET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.assetId = iprot.readString();
                struct.setAssetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VARIABLES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                  struct.variables = new ArrayList<String>(_list34.size);
                  for (int _i35 = 0; _i35 < _list34.size; ++_i35)
                  {
                    String _elem36;
                    _elem36 = iprot.readString();
                    struct.variables.add(_elem36);
                  }
                  iprot.readListEnd();
                }
                struct.setVariablesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROPORTION_SHUFFLING
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.proportionShuffling = iprot.readDouble();
                struct.setProportionShufflingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // WINDOW_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.windowSize = iprot.readI32();
                struct.setWindowSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // INTRA_WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.intraWindow = iprot.readBool();
                struct.setIntraWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // OFFSETTING
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offsetting = iprot.readI32();
                struct.setOffsettingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // ATTRIBUTE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.attribute = iprot.readI32();
                struct.setAttributeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shuffledReplay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.assetId != null) {
          oprot.writeFieldBegin(ASSET_ID_FIELD_DESC);
          oprot.writeString(struct.assetId);
          oprot.writeFieldEnd();
        }
        if (struct.variables != null) {
          oprot.writeFieldBegin(VARIABLES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.variables.size()));
            for (String _iter37 : struct.variables)
            {
              oprot.writeString(_iter37);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROPORTION_SHUFFLING_FIELD_DESC);
        oprot.writeDouble(struct.proportionShuffling);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(WINDOW_SIZE_FIELD_DESC);
        oprot.writeI32(struct.windowSize);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(INTRA_WINDOW_FIELD_DESC);
        oprot.writeBool(struct.intraWindow);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSETTING_FIELD_DESC);
        oprot.writeI32(struct.offsetting);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ATTRIBUTE_FIELD_DESC);
        oprot.writeI32(struct.attribute);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shuffledReplay_argsTupleSchemeFactory implements SchemeFactory {
      public shuffledReplay_argsTupleScheme getScheme() {
        return new shuffledReplay_argsTupleScheme();
      }
    }

    private static class shuffledReplay_argsTupleScheme extends TupleScheme<shuffledReplay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shuffledReplay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAssetId()) {
          optionals.set(0);
        }
        if (struct.isSetVariables()) {
          optionals.set(1);
        }
        if (struct.isSetProportionShuffling()) {
          optionals.set(2);
        }
        if (struct.isSetWindowSize()) {
          optionals.set(3);
        }
        if (struct.isSetIntraWindow()) {
          optionals.set(4);
        }
        if (struct.isSetOffsetting()) {
          optionals.set(5);
        }
        if (struct.isSetAttribute()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetAssetId()) {
          oprot.writeString(struct.assetId);
        }
        if (struct.isSetVariables()) {
          {
            oprot.writeI32(struct.variables.size());
            for (String _iter38 : struct.variables)
            {
              oprot.writeString(_iter38);
            }
          }
        }
        if (struct.isSetProportionShuffling()) {
          oprot.writeDouble(struct.proportionShuffling);
        }
        if (struct.isSetWindowSize()) {
          oprot.writeI32(struct.windowSize);
        }
        if (struct.isSetIntraWindow()) {
          oprot.writeBool(struct.intraWindow);
        }
        if (struct.isSetOffsetting()) {
          oprot.writeI32(struct.offsetting);
        }
        if (struct.isSetAttribute()) {
          oprot.writeI32(struct.attribute);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shuffledReplay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.assetId = iprot.readString();
          struct.setAssetIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.variables = new ArrayList<String>(_list39.size);
            for (int _i40 = 0; _i40 < _list39.size; ++_i40)
            {
              String _elem41;
              _elem41 = iprot.readString();
              struct.variables.add(_elem41);
            }
          }
          struct.setVariablesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.proportionShuffling = iprot.readDouble();
          struct.setProportionShufflingIsSet(true);
        }
        if (incoming.get(3)) {
          struct.windowSize = iprot.readI32();
          struct.setWindowSizeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.intraWindow = iprot.readBool();
          struct.setIntraWindowIsSet(true);
        }
        if (incoming.get(5)) {
          struct.offsetting = iprot.readI32();
          struct.setOffsettingIsSet(true);
        }
        if (incoming.get(6)) {
          struct.attribute = iprot.readI32();
          struct.setAttributeIsSet(true);
        }
      }
    }

  }

  public static class shuffledReplay_result implements org.apache.thrift.TBase<shuffledReplay_result, shuffledReplay_result._Fields>, java.io.Serializable, Cloneable, Comparable<shuffledReplay_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shuffledReplay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shuffledReplay_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shuffledReplay_resultTupleSchemeFactory());
    }

    public Map<String,List<Double>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shuffledReplay_result.class, metaDataMap);
    }

    public shuffledReplay_result() {
    }

    public shuffledReplay_result(
      Map<String,List<Double>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shuffledReplay_result(shuffledReplay_result other) {
      if (other.isSetSuccess()) {
        Map<String,List<Double>> __this__success = new HashMap<String,List<Double>>(other.success.size());
        for (Map.Entry<String, List<Double>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          List<Double> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          List<Double> __this__success_copy_value = new ArrayList<Double>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public shuffledReplay_result deepCopy() {
      return new shuffledReplay_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, List<Double> val) {
      if (this.success == null) {
        this.success = new HashMap<String,List<Double>>();
      }
      this.success.put(key, val);
    }

    public Map<String,List<Double>> getSuccess() {
      return this.success;
    }

    public shuffledReplay_result setSuccess(Map<String,List<Double>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,List<Double>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shuffledReplay_result)
        return this.equals((shuffledReplay_result)that);
      return false;
    }

    public boolean equals(shuffledReplay_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(shuffledReplay_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shuffledReplay_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shuffledReplay_resultStandardSchemeFactory implements SchemeFactory {
      public shuffledReplay_resultStandardScheme getScheme() {
        return new shuffledReplay_resultStandardScheme();
      }
    }

    private static class shuffledReplay_resultStandardScheme extends StandardScheme<shuffledReplay_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shuffledReplay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map42 = iprot.readMapBegin();
                  struct.success = new HashMap<String,List<Double>>(2*_map42.size);
                  for (int _i43 = 0; _i43 < _map42.size; ++_i43)
                  {
                    String _key44;
                    List<Double> _val45;
                    _key44 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                      _val45 = new ArrayList<Double>(_list46.size);
                      for (int _i47 = 0; _i47 < _list46.size; ++_i47)
                      {
                        double _elem48;
                        _elem48 = iprot.readDouble();
                        _val45.add(_elem48);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key44, _val45);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shuffledReplay_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<String, List<Double>> _iter49 : struct.success.entrySet())
            {
              oprot.writeString(_iter49.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter49.getValue().size()));
                for (double _iter50 : _iter49.getValue())
                {
                  oprot.writeDouble(_iter50);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shuffledReplay_resultTupleSchemeFactory implements SchemeFactory {
      public shuffledReplay_resultTupleScheme getScheme() {
        return new shuffledReplay_resultTupleScheme();
      }
    }

    private static class shuffledReplay_resultTupleScheme extends TupleScheme<shuffledReplay_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shuffledReplay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, List<Double>> _iter51 : struct.success.entrySet())
            {
              oprot.writeString(_iter51.getKey());
              {
                oprot.writeI32(_iter51.getValue().size());
                for (double _iter52 : _iter51.getValue())
                {
                  oprot.writeDouble(_iter52);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shuffledReplay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map53 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new HashMap<String,List<Double>>(2*_map53.size);
            for (int _i54 = 0; _i54 < _map53.size; ++_i54)
            {
              String _key55;
              List<Double> _val56;
              _key55 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _val56 = new ArrayList<Double>(_list57.size);
                for (int _i58 = 0; _i58 < _list57.size; ++_i58)
                {
                  double _elem59;
                  _elem59 = iprot.readDouble();
                  _val56.add(_elem59);
                }
              }
              struct.success.put(_key55, _val56);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class shuffledReplayDateRange_args implements org.apache.thrift.TBase<shuffledReplayDateRange_args, shuffledReplayDateRange_args._Fields>, java.io.Serializable, Cloneable, Comparable<shuffledReplayDateRange_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shuffledReplayDateRange_args");

    private static final org.apache.thrift.protocol.TField ASSET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("assetId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VARIABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("variables", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField PROPORTION_SHUFFLING_FIELD_DESC = new org.apache.thrift.protocol.TField("proportionShuffling", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField WINDOW_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("windowSize", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField INTRA_WINDOW_FIELD_DESC = new org.apache.thrift.protocol.TField("intraWindow", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField OFFSETTING_FIELD_DESC = new org.apache.thrift.protocol.TField("offsetting", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField START_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startDateTime", org.apache.thrift.protocol.TType.I64, (short)8);
    private static final org.apache.thrift.protocol.TField END_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endDateTime", org.apache.thrift.protocol.TType.I64, (short)9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shuffledReplayDateRange_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shuffledReplayDateRange_argsTupleSchemeFactory());
    }

    public String assetId; // required
    public List<String> variables; // required
    public double proportionShuffling; // required
    public int windowSize; // required
    public boolean intraWindow; // required
    public int offsetting; // required
    public int attribute; // required
    public long startDateTime; // required
    public long endDateTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ASSET_ID((short)1, "assetId"),
      VARIABLES((short)2, "variables"),
      PROPORTION_SHUFFLING((short)3, "proportionShuffling"),
      WINDOW_SIZE((short)4, "windowSize"),
      INTRA_WINDOW((short)5, "intraWindow"),
      OFFSETTING((short)6, "offsetting"),
      ATTRIBUTE((short)7, "attribute"),
      START_DATE_TIME((short)8, "startDateTime"),
      END_DATE_TIME((short)9, "endDateTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ASSET_ID
            return ASSET_ID;
          case 2: // VARIABLES
            return VARIABLES;
          case 3: // PROPORTION_SHUFFLING
            return PROPORTION_SHUFFLING;
          case 4: // WINDOW_SIZE
            return WINDOW_SIZE;
          case 5: // INTRA_WINDOW
            return INTRA_WINDOW;
          case 6: // OFFSETTING
            return OFFSETTING;
          case 7: // ATTRIBUTE
            return ATTRIBUTE;
          case 8: // START_DATE_TIME
            return START_DATE_TIME;
          case 9: // END_DATE_TIME
            return END_DATE_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROPORTIONSHUFFLING_ISSET_ID = 0;
    private static final int __WINDOWSIZE_ISSET_ID = 1;
    private static final int __INTRAWINDOW_ISSET_ID = 2;
    private static final int __OFFSETTING_ISSET_ID = 3;
    private static final int __ATTRIBUTE_ISSET_ID = 4;
    private static final int __STARTDATETIME_ISSET_ID = 5;
    private static final int __ENDDATETIME_ISSET_ID = 6;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ASSET_ID, new org.apache.thrift.meta_data.FieldMetaData("assetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VARIABLES, new org.apache.thrift.meta_data.FieldMetaData("variables", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.PROPORTION_SHUFFLING, new org.apache.thrift.meta_data.FieldMetaData("proportionShuffling", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.WINDOW_SIZE, new org.apache.thrift.meta_data.FieldMetaData("windowSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.INTRA_WINDOW, new org.apache.thrift.meta_data.FieldMetaData("intraWindow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.OFFSETTING, new org.apache.thrift.meta_data.FieldMetaData("offsetting", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ATTRIBUTE, new org.apache.thrift.meta_data.FieldMetaData("attribute", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("startDateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("endDateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shuffledReplayDateRange_args.class, metaDataMap);
    }

    public shuffledReplayDateRange_args() {
    }

    public shuffledReplayDateRange_args(
      String assetId,
      List<String> variables,
      double proportionShuffling,
      int windowSize,
      boolean intraWindow,
      int offsetting,
      int attribute,
      long startDateTime,
      long endDateTime)
    {
      this();
      this.assetId = assetId;
      this.variables = variables;
      this.proportionShuffling = proportionShuffling;
      setProportionShufflingIsSet(true);
      this.windowSize = windowSize;
      setWindowSizeIsSet(true);
      this.intraWindow = intraWindow;
      setIntraWindowIsSet(true);
      this.offsetting = offsetting;
      setOffsettingIsSet(true);
      this.attribute = attribute;
      setAttributeIsSet(true);
      this.startDateTime = startDateTime;
      setStartDateTimeIsSet(true);
      this.endDateTime = endDateTime;
      setEndDateTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shuffledReplayDateRange_args(shuffledReplayDateRange_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAssetId()) {
        this.assetId = other.assetId;
      }
      if (other.isSetVariables()) {
        List<String> __this__variables = new ArrayList<String>(other.variables);
        this.variables = __this__variables;
      }
      this.proportionShuffling = other.proportionShuffling;
      this.windowSize = other.windowSize;
      this.intraWindow = other.intraWindow;
      this.offsetting = other.offsetting;
      this.attribute = other.attribute;
      this.startDateTime = other.startDateTime;
      this.endDateTime = other.endDateTime;
    }

    public shuffledReplayDateRange_args deepCopy() {
      return new shuffledReplayDateRange_args(this);
    }

    @Override
    public void clear() {
      this.assetId = null;
      this.variables = null;
      setProportionShufflingIsSet(false);
      this.proportionShuffling = 0.0;
      setWindowSizeIsSet(false);
      this.windowSize = 0;
      setIntraWindowIsSet(false);
      this.intraWindow = false;
      setOffsettingIsSet(false);
      this.offsetting = 0;
      setAttributeIsSet(false);
      this.attribute = 0;
      setStartDateTimeIsSet(false);
      this.startDateTime = 0;
      setEndDateTimeIsSet(false);
      this.endDateTime = 0;
    }

    public String getAssetId() {
      return this.assetId;
    }

    public shuffledReplayDateRange_args setAssetId(String assetId) {
      this.assetId = assetId;
      return this;
    }

    public void unsetAssetId() {
      this.assetId = null;
    }

    /** Returns true if field assetId is set (has been assigned a value) and false otherwise */
    public boolean isSetAssetId() {
      return this.assetId != null;
    }

    public void setAssetIdIsSet(boolean value) {
      if (!value) {
        this.assetId = null;
      }
    }

    public int getVariablesSize() {
      return (this.variables == null) ? 0 : this.variables.size();
    }

    public java.util.Iterator<String> getVariablesIterator() {
      return (this.variables == null) ? null : this.variables.iterator();
    }

    public void addToVariables(String elem) {
      if (this.variables == null) {
        this.variables = new ArrayList<String>();
      }
      this.variables.add(elem);
    }

    public List<String> getVariables() {
      return this.variables;
    }

    public shuffledReplayDateRange_args setVariables(List<String> variables) {
      this.variables = variables;
      return this;
    }

    public void unsetVariables() {
      this.variables = null;
    }

    /** Returns true if field variables is set (has been assigned a value) and false otherwise */
    public boolean isSetVariables() {
      return this.variables != null;
    }

    public void setVariablesIsSet(boolean value) {
      if (!value) {
        this.variables = null;
      }
    }

    public double getProportionShuffling() {
      return this.proportionShuffling;
    }

    public shuffledReplayDateRange_args setProportionShuffling(double proportionShuffling) {
      this.proportionShuffling = proportionShuffling;
      setProportionShufflingIsSet(true);
      return this;
    }

    public void unsetProportionShuffling() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROPORTIONSHUFFLING_ISSET_ID);
    }

    /** Returns true if field proportionShuffling is set (has been assigned a value) and false otherwise */
    public boolean isSetProportionShuffling() {
      return EncodingUtils.testBit(__isset_bitfield, __PROPORTIONSHUFFLING_ISSET_ID);
    }

    public void setProportionShufflingIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROPORTIONSHUFFLING_ISSET_ID, value);
    }

    public int getWindowSize() {
      return this.windowSize;
    }

    public shuffledReplayDateRange_args setWindowSize(int windowSize) {
      this.windowSize = windowSize;
      setWindowSizeIsSet(true);
      return this;
    }

    public void unsetWindowSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINDOWSIZE_ISSET_ID);
    }

    /** Returns true if field windowSize is set (has been assigned a value) and false otherwise */
    public boolean isSetWindowSize() {
      return EncodingUtils.testBit(__isset_bitfield, __WINDOWSIZE_ISSET_ID);
    }

    public void setWindowSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINDOWSIZE_ISSET_ID, value);
    }

    public boolean isIntraWindow() {
      return this.intraWindow;
    }

    public shuffledReplayDateRange_args setIntraWindow(boolean intraWindow) {
      this.intraWindow = intraWindow;
      setIntraWindowIsSet(true);
      return this;
    }

    public void unsetIntraWindow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTRAWINDOW_ISSET_ID);
    }

    /** Returns true if field intraWindow is set (has been assigned a value) and false otherwise */
    public boolean isSetIntraWindow() {
      return EncodingUtils.testBit(__isset_bitfield, __INTRAWINDOW_ISSET_ID);
    }

    public void setIntraWindowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTRAWINDOW_ISSET_ID, value);
    }

    public int getOffsetting() {
      return this.offsetting;
    }

    public shuffledReplayDateRange_args setOffsetting(int offsetting) {
      this.offsetting = offsetting;
      setOffsettingIsSet(true);
      return this;
    }

    public void unsetOffsetting() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSETTING_ISSET_ID);
    }

    /** Returns true if field offsetting is set (has been assigned a value) and false otherwise */
    public boolean isSetOffsetting() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSETTING_ISSET_ID);
    }

    public void setOffsettingIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSETTING_ISSET_ID, value);
    }

    public int getAttribute() {
      return this.attribute;
    }

    public shuffledReplayDateRange_args setAttribute(int attribute) {
      this.attribute = attribute;
      setAttributeIsSet(true);
      return this;
    }

    public void unsetAttribute() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATTRIBUTE_ISSET_ID);
    }

    /** Returns true if field attribute is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute() {
      return EncodingUtils.testBit(__isset_bitfield, __ATTRIBUTE_ISSET_ID);
    }

    public void setAttributeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATTRIBUTE_ISSET_ID, value);
    }

    public long getStartDateTime() {
      return this.startDateTime;
    }

    public shuffledReplayDateRange_args setStartDateTime(long startDateTime) {
      this.startDateTime = startDateTime;
      setStartDateTimeIsSet(true);
      return this;
    }

    public void unsetStartDateTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTDATETIME_ISSET_ID);
    }

    /** Returns true if field startDateTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartDateTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTDATETIME_ISSET_ID);
    }

    public void setStartDateTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTDATETIME_ISSET_ID, value);
    }

    public long getEndDateTime() {
      return this.endDateTime;
    }

    public shuffledReplayDateRange_args setEndDateTime(long endDateTime) {
      this.endDateTime = endDateTime;
      setEndDateTimeIsSet(true);
      return this;
    }

    public void unsetEndDateTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATETIME_ISSET_ID);
    }

    /** Returns true if field endDateTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndDateTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATETIME_ISSET_ID);
    }

    public void setEndDateTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATETIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ASSET_ID:
        if (value == null) {
          unsetAssetId();
        } else {
          setAssetId((String)value);
        }
        break;

      case VARIABLES:
        if (value == null) {
          unsetVariables();
        } else {
          setVariables((List<String>)value);
        }
        break;

      case PROPORTION_SHUFFLING:
        if (value == null) {
          unsetProportionShuffling();
        } else {
          setProportionShuffling((Double)value);
        }
        break;

      case WINDOW_SIZE:
        if (value == null) {
          unsetWindowSize();
        } else {
          setWindowSize((Integer)value);
        }
        break;

      case INTRA_WINDOW:
        if (value == null) {
          unsetIntraWindow();
        } else {
          setIntraWindow((Boolean)value);
        }
        break;

      case OFFSETTING:
        if (value == null) {
          unsetOffsetting();
        } else {
          setOffsetting((Integer)value);
        }
        break;

      case ATTRIBUTE:
        if (value == null) {
          unsetAttribute();
        } else {
          setAttribute((Integer)value);
        }
        break;

      case START_DATE_TIME:
        if (value == null) {
          unsetStartDateTime();
        } else {
          setStartDateTime((Long)value);
        }
        break;

      case END_DATE_TIME:
        if (value == null) {
          unsetEndDateTime();
        } else {
          setEndDateTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ASSET_ID:
        return getAssetId();

      case VARIABLES:
        return getVariables();

      case PROPORTION_SHUFFLING:
        return Double.valueOf(getProportionShuffling());

      case WINDOW_SIZE:
        return Integer.valueOf(getWindowSize());

      case INTRA_WINDOW:
        return Boolean.valueOf(isIntraWindow());

      case OFFSETTING:
        return Integer.valueOf(getOffsetting());

      case ATTRIBUTE:
        return Integer.valueOf(getAttribute());

      case START_DATE_TIME:
        return Long.valueOf(getStartDateTime());

      case END_DATE_TIME:
        return Long.valueOf(getEndDateTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ASSET_ID:
        return isSetAssetId();
      case VARIABLES:
        return isSetVariables();
      case PROPORTION_SHUFFLING:
        return isSetProportionShuffling();
      case WINDOW_SIZE:
        return isSetWindowSize();
      case INTRA_WINDOW:
        return isSetIntraWindow();
      case OFFSETTING:
        return isSetOffsetting();
      case ATTRIBUTE:
        return isSetAttribute();
      case START_DATE_TIME:
        return isSetStartDateTime();
      case END_DATE_TIME:
        return isSetEndDateTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shuffledReplayDateRange_args)
        return this.equals((shuffledReplayDateRange_args)that);
      return false;
    }

    public boolean equals(shuffledReplayDateRange_args that) {
      if (that == null)
        return false;

      boolean this_present_assetId = true && this.isSetAssetId();
      boolean that_present_assetId = true && that.isSetAssetId();
      if (this_present_assetId || that_present_assetId) {
        if (!(this_present_assetId && that_present_assetId))
          return false;
        if (!this.assetId.equals(that.assetId))
          return false;
      }

      boolean this_present_variables = true && this.isSetVariables();
      boolean that_present_variables = true && that.isSetVariables();
      if (this_present_variables || that_present_variables) {
        if (!(this_present_variables && that_present_variables))
          return false;
        if (!this.variables.equals(that.variables))
          return false;
      }

      boolean this_present_proportionShuffling = true;
      boolean that_present_proportionShuffling = true;
      if (this_present_proportionShuffling || that_present_proportionShuffling) {
        if (!(this_present_proportionShuffling && that_present_proportionShuffling))
          return false;
        if (this.proportionShuffling != that.proportionShuffling)
          return false;
      }

      boolean this_present_windowSize = true;
      boolean that_present_windowSize = true;
      if (this_present_windowSize || that_present_windowSize) {
        if (!(this_present_windowSize && that_present_windowSize))
          return false;
        if (this.windowSize != that.windowSize)
          return false;
      }

      boolean this_present_intraWindow = true;
      boolean that_present_intraWindow = true;
      if (this_present_intraWindow || that_present_intraWindow) {
        if (!(this_present_intraWindow && that_present_intraWindow))
          return false;
        if (this.intraWindow != that.intraWindow)
          return false;
      }

      boolean this_present_offsetting = true;
      boolean that_present_offsetting = true;
      if (this_present_offsetting || that_present_offsetting) {
        if (!(this_present_offsetting && that_present_offsetting))
          return false;
        if (this.offsetting != that.offsetting)
          return false;
      }

      boolean this_present_attribute = true;
      boolean that_present_attribute = true;
      if (this_present_attribute || that_present_attribute) {
        if (!(this_present_attribute && that_present_attribute))
          return false;
        if (this.attribute != that.attribute)
          return false;
      }

      boolean this_present_startDateTime = true;
      boolean that_present_startDateTime = true;
      if (this_present_startDateTime || that_present_startDateTime) {
        if (!(this_present_startDateTime && that_present_startDateTime))
          return false;
        if (this.startDateTime != that.startDateTime)
          return false;
      }

      boolean this_present_endDateTime = true;
      boolean that_present_endDateTime = true;
      if (this_present_endDateTime || that_present_endDateTime) {
        if (!(this_present_endDateTime && that_present_endDateTime))
          return false;
        if (this.endDateTime != that.endDateTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(shuffledReplayDateRange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAssetId()).compareTo(other.isSetAssetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAssetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assetId, other.assetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVariables()).compareTo(other.isSetVariables());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVariables()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variables, other.variables);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProportionShuffling()).compareTo(other.isSetProportionShuffling());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProportionShuffling()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proportionShuffling, other.proportionShuffling);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWindowSize()).compareTo(other.isSetWindowSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWindowSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.windowSize, other.windowSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIntraWindow()).compareTo(other.isSetIntraWindow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIntraWindow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intraWindow, other.intraWindow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOffsetting()).compareTo(other.isSetOffsetting());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffsetting()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offsetting, other.offsetting);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAttribute()).compareTo(other.isSetAttribute());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute, other.attribute);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartDateTime()).compareTo(other.isSetStartDateTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartDateTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDateTime, other.startDateTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndDateTime()).compareTo(other.isSetEndDateTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndDateTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDateTime, other.endDateTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shuffledReplayDateRange_args(");
      boolean first = true;

      sb.append("assetId:");
      if (this.assetId == null) {
        sb.append("null");
      } else {
        sb.append(this.assetId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("variables:");
      if (this.variables == null) {
        sb.append("null");
      } else {
        sb.append(this.variables);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("proportionShuffling:");
      sb.append(this.proportionShuffling);
      first = false;
      if (!first) sb.append(", ");
      sb.append("windowSize:");
      sb.append(this.windowSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("intraWindow:");
      sb.append(this.intraWindow);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offsetting:");
      sb.append(this.offsetting);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attribute:");
      sb.append(this.attribute);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startDateTime:");
      sb.append(this.startDateTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endDateTime:");
      sb.append(this.endDateTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shuffledReplayDateRange_argsStandardSchemeFactory implements SchemeFactory {
      public shuffledReplayDateRange_argsStandardScheme getScheme() {
        return new shuffledReplayDateRange_argsStandardScheme();
      }
    }

    private static class shuffledReplayDateRange_argsStandardScheme extends StandardScheme<shuffledReplayDateRange_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shuffledReplayDateRange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ASSET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.assetId = iprot.readString();
                struct.setAssetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VARIABLES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                  struct.variables = new ArrayList<String>(_list60.size);
                  for (int _i61 = 0; _i61 < _list60.size; ++_i61)
                  {
                    String _elem62;
                    _elem62 = iprot.readString();
                    struct.variables.add(_elem62);
                  }
                  iprot.readListEnd();
                }
                struct.setVariablesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROPORTION_SHUFFLING
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.proportionShuffling = iprot.readDouble();
                struct.setProportionShufflingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // WINDOW_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.windowSize = iprot.readI32();
                struct.setWindowSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // INTRA_WINDOW
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.intraWindow = iprot.readBool();
                struct.setIntraWindowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // OFFSETTING
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offsetting = iprot.readI32();
                struct.setOffsettingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // ATTRIBUTE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.attribute = iprot.readI32();
                struct.setAttributeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // START_DATE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startDateTime = iprot.readI64();
                struct.setStartDateTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // END_DATE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endDateTime = iprot.readI64();
                struct.setEndDateTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shuffledReplayDateRange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.assetId != null) {
          oprot.writeFieldBegin(ASSET_ID_FIELD_DESC);
          oprot.writeString(struct.assetId);
          oprot.writeFieldEnd();
        }
        if (struct.variables != null) {
          oprot.writeFieldBegin(VARIABLES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.variables.size()));
            for (String _iter63 : struct.variables)
            {
              oprot.writeString(_iter63);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROPORTION_SHUFFLING_FIELD_DESC);
        oprot.writeDouble(struct.proportionShuffling);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(WINDOW_SIZE_FIELD_DESC);
        oprot.writeI32(struct.windowSize);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(INTRA_WINDOW_FIELD_DESC);
        oprot.writeBool(struct.intraWindow);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSETTING_FIELD_DESC);
        oprot.writeI32(struct.offsetting);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ATTRIBUTE_FIELD_DESC);
        oprot.writeI32(struct.attribute);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.startDateTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.endDateTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shuffledReplayDateRange_argsTupleSchemeFactory implements SchemeFactory {
      public shuffledReplayDateRange_argsTupleScheme getScheme() {
        return new shuffledReplayDateRange_argsTupleScheme();
      }
    }

    private static class shuffledReplayDateRange_argsTupleScheme extends TupleScheme<shuffledReplayDateRange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shuffledReplayDateRange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAssetId()) {
          optionals.set(0);
        }
        if (struct.isSetVariables()) {
          optionals.set(1);
        }
        if (struct.isSetProportionShuffling()) {
          optionals.set(2);
        }
        if (struct.isSetWindowSize()) {
          optionals.set(3);
        }
        if (struct.isSetIntraWindow()) {
          optionals.set(4);
        }
        if (struct.isSetOffsetting()) {
          optionals.set(5);
        }
        if (struct.isSetAttribute()) {
          optionals.set(6);
        }
        if (struct.isSetStartDateTime()) {
          optionals.set(7);
        }
        if (struct.isSetEndDateTime()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetAssetId()) {
          oprot.writeString(struct.assetId);
        }
        if (struct.isSetVariables()) {
          {
            oprot.writeI32(struct.variables.size());
            for (String _iter64 : struct.variables)
            {
              oprot.writeString(_iter64);
            }
          }
        }
        if (struct.isSetProportionShuffling()) {
          oprot.writeDouble(struct.proportionShuffling);
        }
        if (struct.isSetWindowSize()) {
          oprot.writeI32(struct.windowSize);
        }
        if (struct.isSetIntraWindow()) {
          oprot.writeBool(struct.intraWindow);
        }
        if (struct.isSetOffsetting()) {
          oprot.writeI32(struct.offsetting);
        }
        if (struct.isSetAttribute()) {
          oprot.writeI32(struct.attribute);
        }
        if (struct.isSetStartDateTime()) {
          oprot.writeI64(struct.startDateTime);
        }
        if (struct.isSetEndDateTime()) {
          oprot.writeI64(struct.endDateTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shuffledReplayDateRange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.assetId = iprot.readString();
          struct.setAssetIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.variables = new ArrayList<String>(_list65.size);
            for (int _i66 = 0; _i66 < _list65.size; ++_i66)
            {
              String _elem67;
              _elem67 = iprot.readString();
              struct.variables.add(_elem67);
            }
          }
          struct.setVariablesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.proportionShuffling = iprot.readDouble();
          struct.setProportionShufflingIsSet(true);
        }
        if (incoming.get(3)) {
          struct.windowSize = iprot.readI32();
          struct.setWindowSizeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.intraWindow = iprot.readBool();
          struct.setIntraWindowIsSet(true);
        }
        if (incoming.get(5)) {
          struct.offsetting = iprot.readI32();
          struct.setOffsettingIsSet(true);
        }
        if (incoming.get(6)) {
          struct.attribute = iprot.readI32();
          struct.setAttributeIsSet(true);
        }
        if (incoming.get(7)) {
          struct.startDateTime = iprot.readI64();
          struct.setStartDateTimeIsSet(true);
        }
        if (incoming.get(8)) {
          struct.endDateTime = iprot.readI64();
          struct.setEndDateTimeIsSet(true);
        }
      }
    }

  }

  public static class shuffledReplayDateRange_result implements org.apache.thrift.TBase<shuffledReplayDateRange_result, shuffledReplayDateRange_result._Fields>, java.io.Serializable, Cloneable, Comparable<shuffledReplayDateRange_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shuffledReplayDateRange_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shuffledReplayDateRange_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shuffledReplayDateRange_resultTupleSchemeFactory());
    }

    public Map<String,List<Double>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shuffledReplayDateRange_result.class, metaDataMap);
    }

    public shuffledReplayDateRange_result() {
    }

    public shuffledReplayDateRange_result(
      Map<String,List<Double>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shuffledReplayDateRange_result(shuffledReplayDateRange_result other) {
      if (other.isSetSuccess()) {
        Map<String,List<Double>> __this__success = new HashMap<String,List<Double>>(other.success.size());
        for (Map.Entry<String, List<Double>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          List<Double> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          List<Double> __this__success_copy_value = new ArrayList<Double>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public shuffledReplayDateRange_result deepCopy() {
      return new shuffledReplayDateRange_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, List<Double> val) {
      if (this.success == null) {
        this.success = new HashMap<String,List<Double>>();
      }
      this.success.put(key, val);
    }

    public Map<String,List<Double>> getSuccess() {
      return this.success;
    }

    public shuffledReplayDateRange_result setSuccess(Map<String,List<Double>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,List<Double>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shuffledReplayDateRange_result)
        return this.equals((shuffledReplayDateRange_result)that);
      return false;
    }

    public boolean equals(shuffledReplayDateRange_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(shuffledReplayDateRange_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shuffledReplayDateRange_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shuffledReplayDateRange_resultStandardSchemeFactory implements SchemeFactory {
      public shuffledReplayDateRange_resultStandardScheme getScheme() {
        return new shuffledReplayDateRange_resultStandardScheme();
      }
    }

    private static class shuffledReplayDateRange_resultStandardScheme extends StandardScheme<shuffledReplayDateRange_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shuffledReplayDateRange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map68 = iprot.readMapBegin();
                  struct.success = new HashMap<String,List<Double>>(2*_map68.size);
                  for (int _i69 = 0; _i69 < _map68.size; ++_i69)
                  {
                    String _key70;
                    List<Double> _val71;
                    _key70 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                      _val71 = new ArrayList<Double>(_list72.size);
                      for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                      {
                        double _elem74;
                        _elem74 = iprot.readDouble();
                        _val71.add(_elem74);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key70, _val71);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shuffledReplayDateRange_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<String, List<Double>> _iter75 : struct.success.entrySet())
            {
              oprot.writeString(_iter75.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter75.getValue().size()));
                for (double _iter76 : _iter75.getValue())
                {
                  oprot.writeDouble(_iter76);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shuffledReplayDateRange_resultTupleSchemeFactory implements SchemeFactory {
      public shuffledReplayDateRange_resultTupleScheme getScheme() {
        return new shuffledReplayDateRange_resultTupleScheme();
      }
    }

    private static class shuffledReplayDateRange_resultTupleScheme extends TupleScheme<shuffledReplayDateRange_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shuffledReplayDateRange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, List<Double>> _iter77 : struct.success.entrySet())
            {
              oprot.writeString(_iter77.getKey());
              {
                oprot.writeI32(_iter77.getValue().size());
                for (double _iter78 : _iter77.getValue())
                {
                  oprot.writeDouble(_iter78);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shuffledReplayDateRange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map79 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new HashMap<String,List<Double>>(2*_map79.size);
            for (int _i80 = 0; _i80 < _map79.size; ++_i80)
            {
              String _key81;
              List<Double> _val82;
              _key81 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list83 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _val82 = new ArrayList<Double>(_list83.size);
                for (int _i84 = 0; _i84 < _list83.size; ++_i84)
                {
                  double _elem85;
                  _elem85 = iprot.readDouble();
                  _val82.add(_elem85);
                }
              }
              struct.success.put(_key81, _val82);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
