#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  """
  Order-book replay service
  """
  def replay(self, assetId, variables, startDate, endDate):
    """
    Replay tick events


    Parameters:
     - assetId
     - variables
     - startDate
     - endDate
    """
    pass

  def shuffledReplay(self, assetId, variables, proportionShuffling, windowSize, intraWindow, offsetting):
    """
    Parameters:
     - assetId
     - variables
     - proportionShuffling
     - windowSize
     - intraWindow
     - offsetting
    """
    pass


class Client(Iface):
  """
  Order-book replay service
  """
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def replay(self, assetId, variables, startDate, endDate):
    """
    Replay tick events


    Parameters:
     - assetId
     - variables
     - startDate
     - endDate
    """
    self.send_replay(assetId, variables, startDate, endDate)
    return self.recv_replay()

  def send_replay(self, assetId, variables, startDate, endDate):
    self._oprot.writeMessageBegin('replay', TMessageType.CALL, self._seqid)
    args = replay_args()
    args.assetId = assetId
    args.variables = variables
    args.startDate = startDate
    args.endDate = endDate
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_replay(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = replay_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "replay failed: unknown result");

  def shuffledReplay(self, assetId, variables, proportionShuffling, windowSize, intraWindow, offsetting):
    """
    Parameters:
     - assetId
     - variables
     - proportionShuffling
     - windowSize
     - intraWindow
     - offsetting
    """
    self.send_shuffledReplay(assetId, variables, proportionShuffling, windowSize, intraWindow, offsetting)
    return self.recv_shuffledReplay()

  def send_shuffledReplay(self, assetId, variables, proportionShuffling, windowSize, intraWindow, offsetting):
    self._oprot.writeMessageBegin('shuffledReplay', TMessageType.CALL, self._seqid)
    args = shuffledReplay_args()
    args.assetId = assetId
    args.variables = variables
    args.proportionShuffling = proportionShuffling
    args.windowSize = windowSize
    args.intraWindow = intraWindow
    args.offsetting = offsetting
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_shuffledReplay(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = shuffledReplay_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "shuffledReplay failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["replay"] = Processor.process_replay
    self._processMap["shuffledReplay"] = Processor.process_shuffledReplay

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_replay(self, seqid, iprot, oprot):
    args = replay_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = replay_result()
    result.success = self._handler.replay(args.assetId, args.variables, args.startDate, args.endDate)
    oprot.writeMessageBegin("replay", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_shuffledReplay(self, seqid, iprot, oprot):
    args = shuffledReplay_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = shuffledReplay_result()
    result.success = self._handler.shuffledReplay(args.assetId, args.variables, args.proportionShuffling, args.windowSize, args.intraWindow, args.offsetting)
    oprot.writeMessageBegin("shuffledReplay", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class replay_args:
  """
  Attributes:
   - assetId
   - variables
   - startDate
   - endDate
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'assetId', None, None, ), # 1
    (2, TType.LIST, 'variables', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'startDate', None, None, ), # 3
    (4, TType.STRING, 'endDate', None, None, ), # 4
  )

  def __init__(self, assetId=None, variables=None, startDate=None, endDate=None,):
    self.assetId = assetId
    self.variables = variables
    self.startDate = startDate
    self.endDate = endDate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.assetId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.variables = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.variables.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.startDate = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.endDate = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('replay_args')
    if self.assetId is not None:
      oprot.writeFieldBegin('assetId', TType.STRING, 1)
      oprot.writeString(self.assetId)
      oprot.writeFieldEnd()
    if self.variables is not None:
      oprot.writeFieldBegin('variables', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.variables))
      for iter6 in self.variables:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.startDate is not None:
      oprot.writeFieldBegin('startDate', TType.STRING, 3)
      oprot.writeString(self.startDate)
      oprot.writeFieldEnd()
    if self.endDate is not None:
      oprot.writeFieldBegin('endDate', TType.STRING, 4)
      oprot.writeString(self.endDate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class replay_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.MAP,(TType.STRING,None,TType.DOUBLE,None)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = {}
            (_ktype14, _vtype15, _size13 ) = iprot.readMapBegin() 
            for _i17 in xrange(_size13):
              _key18 = iprot.readString();
              _val19 = iprot.readDouble();
              _elem12[_key18] = _val19
            iprot.readMapEnd()
            self.success.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('replay_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.MAP, len(self.success))
      for iter20 in self.success:
        oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(iter20))
        for kiter21,viter22 in iter20.items():
          oprot.writeString(kiter21)
          oprot.writeDouble(viter22)
        oprot.writeMapEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class shuffledReplay_args:
  """
  Attributes:
   - assetId
   - variables
   - proportionShuffling
   - windowSize
   - intraWindow
   - offsetting
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'assetId', None, None, ), # 1
    (2, TType.LIST, 'variables', (TType.STRING,None), None, ), # 2
    (3, TType.DOUBLE, 'proportionShuffling', None, None, ), # 3
    (4, TType.I32, 'windowSize', None, None, ), # 4
    (5, TType.BOOL, 'intraWindow', None, None, ), # 5
    (6, TType.I32, 'offsetting', None, None, ), # 6
  )

  def __init__(self, assetId=None, variables=None, proportionShuffling=None, windowSize=None, intraWindow=None, offsetting=None,):
    self.assetId = assetId
    self.variables = variables
    self.proportionShuffling = proportionShuffling
    self.windowSize = windowSize
    self.intraWindow = intraWindow
    self.offsetting = offsetting

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.assetId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.variables = []
          (_etype26, _size23) = iprot.readListBegin()
          for _i27 in xrange(_size23):
            _elem28 = iprot.readString();
            self.variables.append(_elem28)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.proportionShuffling = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.windowSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.intraWindow = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.offsetting = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('shuffledReplay_args')
    if self.assetId is not None:
      oprot.writeFieldBegin('assetId', TType.STRING, 1)
      oprot.writeString(self.assetId)
      oprot.writeFieldEnd()
    if self.variables is not None:
      oprot.writeFieldBegin('variables', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.variables))
      for iter29 in self.variables:
        oprot.writeString(iter29)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.proportionShuffling is not None:
      oprot.writeFieldBegin('proportionShuffling', TType.DOUBLE, 3)
      oprot.writeDouble(self.proportionShuffling)
      oprot.writeFieldEnd()
    if self.windowSize is not None:
      oprot.writeFieldBegin('windowSize', TType.I32, 4)
      oprot.writeI32(self.windowSize)
      oprot.writeFieldEnd()
    if self.intraWindow is not None:
      oprot.writeFieldBegin('intraWindow', TType.BOOL, 5)
      oprot.writeBool(self.intraWindow)
      oprot.writeFieldEnd()
    if self.offsetting is not None:
      oprot.writeFieldBegin('offsetting', TType.I32, 6)
      oprot.writeI32(self.offsetting)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class shuffledReplay_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.MAP,(TType.STRING,None,TType.DOUBLE,None)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype33, _size30) = iprot.readListBegin()
          for _i34 in xrange(_size30):
            _elem35 = {}
            (_ktype37, _vtype38, _size36 ) = iprot.readMapBegin() 
            for _i40 in xrange(_size36):
              _key41 = iprot.readString();
              _val42 = iprot.readDouble();
              _elem35[_key41] = _val42
            iprot.readMapEnd()
            self.success.append(_elem35)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('shuffledReplay_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.MAP, len(self.success))
      for iter43 in self.success:
        oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(iter43))
        for kiter44,viter45 in iter43.items():
          oprot.writeString(kiter44)
          oprot.writeDouble(viter45)
        oprot.writeMapEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
