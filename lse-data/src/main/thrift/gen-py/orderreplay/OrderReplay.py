#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    """
    Order-book replay service
    """
    def replay(self, assetId, variables, startDateTime, endDateTime):
        """
        Replay tick events


        Parameters:
         - assetId
         - variables
         - startDateTime
         - endDateTime
        """
        pass

    def replayToCsv(self, assetId, variables, startDateTime, endDateTime, csvFileName):
        """
        Parameters:
         - assetId
         - variables
         - startDateTime
         - endDateTime
         - csvFileName
        """
        pass

    def shuffledReplay(self, assetId, variables, proportionShuffling, windowSize, intraWindow, offsetting, attribute):
        """
        Parameters:
         - assetId
         - variables
         - proportionShuffling
         - windowSize
         - intraWindow
         - offsetting
         - attribute
        """
        pass

    def shuffledReplayDateRange(self, assetId, variables, proportionShuffling, windowSize, intraWindow, offsetting, attribute, startDateTime, endDateTime):
        """
        Parameters:
         - assetId
         - variables
         - proportionShuffling
         - windowSize
         - intraWindow
         - offsetting
         - attribute
         - startDateTime
         - endDateTime
        """
        pass


class Client(Iface):
    """
    Order-book replay service
    """
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def replay(self, assetId, variables, startDateTime, endDateTime):
        """
        Replay tick events


        Parameters:
         - assetId
         - variables
         - startDateTime
         - endDateTime
        """
        self.send_replay(assetId, variables, startDateTime, endDateTime)
        return self.recv_replay()

    def send_replay(self, assetId, variables, startDateTime, endDateTime):
        self._oprot.writeMessageBegin('replay', TMessageType.CALL, self._seqid)
        args = replay_args()
        args.assetId = assetId
        args.variables = variables
        args.startDateTime = startDateTime
        args.endDateTime = endDateTime
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_replay(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = replay_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "replay failed: unknown result")

    def replayToCsv(self, assetId, variables, startDateTime, endDateTime, csvFileName):
        """
        Parameters:
         - assetId
         - variables
         - startDateTime
         - endDateTime
         - csvFileName
        """
        self.send_replayToCsv(assetId, variables, startDateTime, endDateTime, csvFileName)
        return self.recv_replayToCsv()

    def send_replayToCsv(self, assetId, variables, startDateTime, endDateTime, csvFileName):
        self._oprot.writeMessageBegin('replayToCsv', TMessageType.CALL, self._seqid)
        args = replayToCsv_args()
        args.assetId = assetId
        args.variables = variables
        args.startDateTime = startDateTime
        args.endDateTime = endDateTime
        args.csvFileName = csvFileName
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_replayToCsv(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = replayToCsv_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "replayToCsv failed: unknown result")

    def shuffledReplay(self, assetId, variables, proportionShuffling, windowSize, intraWindow, offsetting, attribute):
        """
        Parameters:
         - assetId
         - variables
         - proportionShuffling
         - windowSize
         - intraWindow
         - offsetting
         - attribute
        """
        self.send_shuffledReplay(assetId, variables, proportionShuffling, windowSize, intraWindow, offsetting, attribute)
        return self.recv_shuffledReplay()

    def send_shuffledReplay(self, assetId, variables, proportionShuffling, windowSize, intraWindow, offsetting, attribute):
        self._oprot.writeMessageBegin('shuffledReplay', TMessageType.CALL, self._seqid)
        args = shuffledReplay_args()
        args.assetId = assetId
        args.variables = variables
        args.proportionShuffling = proportionShuffling
        args.windowSize = windowSize
        args.intraWindow = intraWindow
        args.offsetting = offsetting
        args.attribute = attribute
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_shuffledReplay(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = shuffledReplay_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "shuffledReplay failed: unknown result")

    def shuffledReplayDateRange(self, assetId, variables, proportionShuffling, windowSize, intraWindow, offsetting, attribute, startDateTime, endDateTime):
        """
        Parameters:
         - assetId
         - variables
         - proportionShuffling
         - windowSize
         - intraWindow
         - offsetting
         - attribute
         - startDateTime
         - endDateTime
        """
        self.send_shuffledReplayDateRange(assetId, variables, proportionShuffling, windowSize, intraWindow, offsetting, attribute, startDateTime, endDateTime)
        return self.recv_shuffledReplayDateRange()

    def send_shuffledReplayDateRange(self, assetId, variables, proportionShuffling, windowSize, intraWindow, offsetting, attribute, startDateTime, endDateTime):
        self._oprot.writeMessageBegin('shuffledReplayDateRange', TMessageType.CALL, self._seqid)
        args = shuffledReplayDateRange_args()
        args.assetId = assetId
        args.variables = variables
        args.proportionShuffling = proportionShuffling
        args.windowSize = windowSize
        args.intraWindow = intraWindow
        args.offsetting = offsetting
        args.attribute = attribute
        args.startDateTime = startDateTime
        args.endDateTime = endDateTime
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_shuffledReplayDateRange(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = shuffledReplayDateRange_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "shuffledReplayDateRange failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["replay"] = Processor.process_replay
        self._processMap["replayToCsv"] = Processor.process_replayToCsv
        self._processMap["shuffledReplay"] = Processor.process_shuffledReplay
        self._processMap["shuffledReplayDateRange"] = Processor.process_shuffledReplayDateRange

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_replay(self, seqid, iprot, oprot):
        args = replay_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = replay_result()
        try:
            result.success = self._handler.replay(args.assetId, args.variables, args.startDateTime, args.endDateTime)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("replay", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_replayToCsv(self, seqid, iprot, oprot):
        args = replayToCsv_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = replayToCsv_result()
        try:
            result.success = self._handler.replayToCsv(args.assetId, args.variables, args.startDateTime, args.endDateTime, args.csvFileName)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("replayToCsv", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_shuffledReplay(self, seqid, iprot, oprot):
        args = shuffledReplay_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = shuffledReplay_result()
        try:
            result.success = self._handler.shuffledReplay(args.assetId, args.variables, args.proportionShuffling, args.windowSize, args.intraWindow, args.offsetting, args.attribute)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("shuffledReplay", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_shuffledReplayDateRange(self, seqid, iprot, oprot):
        args = shuffledReplayDateRange_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = shuffledReplayDateRange_result()
        try:
            result.success = self._handler.shuffledReplayDateRange(args.assetId, args.variables, args.proportionShuffling, args.windowSize, args.intraWindow, args.offsetting, args.attribute, args.startDateTime, args.endDateTime)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("shuffledReplayDateRange", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class replay_args(object):
    """
    Attributes:
     - assetId
     - variables
     - startDateTime
     - endDateTime
    """


    def __init__(self, assetId=None, variables=None, startDateTime=None, endDateTime=None,):
        self.assetId = assetId
        self.variables = variables
        self.startDateTime = startDateTime
        self.endDateTime = endDateTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.assetId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.variables = []
                    (_etype26, _size23) = iprot.readListBegin()
                    for _i27 in range(_size23):
                        _elem28 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.variables.append(_elem28)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.startDateTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.endDateTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('replay_args')
        if self.assetId is not None:
            oprot.writeFieldBegin('assetId', TType.STRING, 1)
            oprot.writeString(self.assetId.encode('utf-8') if sys.version_info[0] == 2 else self.assetId)
            oprot.writeFieldEnd()
        if self.variables is not None:
            oprot.writeFieldBegin('variables', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.variables))
            for iter29 in self.variables:
                oprot.writeString(iter29.encode('utf-8') if sys.version_info[0] == 2 else iter29)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.startDateTime is not None:
            oprot.writeFieldBegin('startDateTime', TType.I64, 3)
            oprot.writeI64(self.startDateTime)
            oprot.writeFieldEnd()
        if self.endDateTime is not None:
            oprot.writeFieldBegin('endDateTime', TType.I64, 4)
            oprot.writeI64(self.endDateTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(replay_args)
replay_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'assetId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'variables', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.I64, 'startDateTime', None, None, ),  # 3
    (4, TType.I64, 'endDateTime', None, None, ),  # 4
)


class replay_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = DataFrame()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('replay_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(replay_result)
replay_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [DataFrame, None], None, ),  # 0
)


class replayToCsv_args(object):
    """
    Attributes:
     - assetId
     - variables
     - startDateTime
     - endDateTime
     - csvFileName
    """


    def __init__(self, assetId=None, variables=None, startDateTime=None, endDateTime=None, csvFileName=None,):
        self.assetId = assetId
        self.variables = variables
        self.startDateTime = startDateTime
        self.endDateTime = endDateTime
        self.csvFileName = csvFileName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.assetId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.variables = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.variables.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.startDateTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.endDateTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.csvFileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('replayToCsv_args')
        if self.assetId is not None:
            oprot.writeFieldBegin('assetId', TType.STRING, 1)
            oprot.writeString(self.assetId.encode('utf-8') if sys.version_info[0] == 2 else self.assetId)
            oprot.writeFieldEnd()
        if self.variables is not None:
            oprot.writeFieldBegin('variables', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.variables))
            for iter36 in self.variables:
                oprot.writeString(iter36.encode('utf-8') if sys.version_info[0] == 2 else iter36)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.startDateTime is not None:
            oprot.writeFieldBegin('startDateTime', TType.I64, 3)
            oprot.writeI64(self.startDateTime)
            oprot.writeFieldEnd()
        if self.endDateTime is not None:
            oprot.writeFieldBegin('endDateTime', TType.I64, 4)
            oprot.writeI64(self.endDateTime)
            oprot.writeFieldEnd()
        if self.csvFileName is not None:
            oprot.writeFieldBegin('csvFileName', TType.STRING, 5)
            oprot.writeString(self.csvFileName.encode('utf-8') if sys.version_info[0] == 2 else self.csvFileName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(replayToCsv_args)
replayToCsv_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'assetId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'variables', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.I64, 'startDateTime', None, None, ),  # 3
    (4, TType.I64, 'endDateTime', None, None, ),  # 4
    (5, TType.STRING, 'csvFileName', 'UTF8', None, ),  # 5
)


class replayToCsv_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('replayToCsv_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(replayToCsv_result)
replayToCsv_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class shuffledReplay_args(object):
    """
    Attributes:
     - assetId
     - variables
     - proportionShuffling
     - windowSize
     - intraWindow
     - offsetting
     - attribute
    """


    def __init__(self, assetId=None, variables=None, proportionShuffling=None, windowSize=None, intraWindow=None, offsetting=None, attribute=None,):
        self.assetId = assetId
        self.variables = variables
        self.proportionShuffling = proportionShuffling
        self.windowSize = windowSize
        self.intraWindow = intraWindow
        self.offsetting = offsetting
        self.attribute = attribute

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.assetId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.variables = []
                    (_etype40, _size37) = iprot.readListBegin()
                    for _i41 in range(_size37):
                        _elem42 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.variables.append(_elem42)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.proportionShuffling = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.windowSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.intraWindow = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.offsetting = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.attribute = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('shuffledReplay_args')
        if self.assetId is not None:
            oprot.writeFieldBegin('assetId', TType.STRING, 1)
            oprot.writeString(self.assetId.encode('utf-8') if sys.version_info[0] == 2 else self.assetId)
            oprot.writeFieldEnd()
        if self.variables is not None:
            oprot.writeFieldBegin('variables', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.variables))
            for iter43 in self.variables:
                oprot.writeString(iter43.encode('utf-8') if sys.version_info[0] == 2 else iter43)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.proportionShuffling is not None:
            oprot.writeFieldBegin('proportionShuffling', TType.DOUBLE, 3)
            oprot.writeDouble(self.proportionShuffling)
            oprot.writeFieldEnd()
        if self.windowSize is not None:
            oprot.writeFieldBegin('windowSize', TType.I32, 4)
            oprot.writeI32(self.windowSize)
            oprot.writeFieldEnd()
        if self.intraWindow is not None:
            oprot.writeFieldBegin('intraWindow', TType.BOOL, 5)
            oprot.writeBool(self.intraWindow)
            oprot.writeFieldEnd()
        if self.offsetting is not None:
            oprot.writeFieldBegin('offsetting', TType.I32, 6)
            oprot.writeI32(self.offsetting)
            oprot.writeFieldEnd()
        if self.attribute is not None:
            oprot.writeFieldBegin('attribute', TType.I32, 7)
            oprot.writeI32(self.attribute)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(shuffledReplay_args)
shuffledReplay_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'assetId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'variables', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.DOUBLE, 'proportionShuffling', None, None, ),  # 3
    (4, TType.I32, 'windowSize', None, None, ),  # 4
    (5, TType.BOOL, 'intraWindow', None, None, ),  # 5
    (6, TType.I32, 'offsetting', None, None, ),  # 6
    (7, TType.I32, 'attribute', None, None, ),  # 7
)


class shuffledReplay_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = DataFrame()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('shuffledReplay_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(shuffledReplay_result)
shuffledReplay_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [DataFrame, None], None, ),  # 0
)


class shuffledReplayDateRange_args(object):
    """
    Attributes:
     - assetId
     - variables
     - proportionShuffling
     - windowSize
     - intraWindow
     - offsetting
     - attribute
     - startDateTime
     - endDateTime
    """


    def __init__(self, assetId=None, variables=None, proportionShuffling=None, windowSize=None, intraWindow=None, offsetting=None, attribute=None, startDateTime=None, endDateTime=None,):
        self.assetId = assetId
        self.variables = variables
        self.proportionShuffling = proportionShuffling
        self.windowSize = windowSize
        self.intraWindow = intraWindow
        self.offsetting = offsetting
        self.attribute = attribute
        self.startDateTime = startDateTime
        self.endDateTime = endDateTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.assetId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.variables = []
                    (_etype47, _size44) = iprot.readListBegin()
                    for _i48 in range(_size44):
                        _elem49 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.variables.append(_elem49)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.proportionShuffling = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.windowSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.intraWindow = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.offsetting = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.attribute = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.startDateTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.endDateTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('shuffledReplayDateRange_args')
        if self.assetId is not None:
            oprot.writeFieldBegin('assetId', TType.STRING, 1)
            oprot.writeString(self.assetId.encode('utf-8') if sys.version_info[0] == 2 else self.assetId)
            oprot.writeFieldEnd()
        if self.variables is not None:
            oprot.writeFieldBegin('variables', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.variables))
            for iter50 in self.variables:
                oprot.writeString(iter50.encode('utf-8') if sys.version_info[0] == 2 else iter50)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.proportionShuffling is not None:
            oprot.writeFieldBegin('proportionShuffling', TType.DOUBLE, 3)
            oprot.writeDouble(self.proportionShuffling)
            oprot.writeFieldEnd()
        if self.windowSize is not None:
            oprot.writeFieldBegin('windowSize', TType.I32, 4)
            oprot.writeI32(self.windowSize)
            oprot.writeFieldEnd()
        if self.intraWindow is not None:
            oprot.writeFieldBegin('intraWindow', TType.BOOL, 5)
            oprot.writeBool(self.intraWindow)
            oprot.writeFieldEnd()
        if self.offsetting is not None:
            oprot.writeFieldBegin('offsetting', TType.I32, 6)
            oprot.writeI32(self.offsetting)
            oprot.writeFieldEnd()
        if self.attribute is not None:
            oprot.writeFieldBegin('attribute', TType.I32, 7)
            oprot.writeI32(self.attribute)
            oprot.writeFieldEnd()
        if self.startDateTime is not None:
            oprot.writeFieldBegin('startDateTime', TType.I64, 8)
            oprot.writeI64(self.startDateTime)
            oprot.writeFieldEnd()
        if self.endDateTime is not None:
            oprot.writeFieldBegin('endDateTime', TType.I64, 9)
            oprot.writeI64(self.endDateTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(shuffledReplayDateRange_args)
shuffledReplayDateRange_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'assetId', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'variables', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.DOUBLE, 'proportionShuffling', None, None, ),  # 3
    (4, TType.I32, 'windowSize', None, None, ),  # 4
    (5, TType.BOOL, 'intraWindow', None, None, ),  # 5
    (6, TType.I32, 'offsetting', None, None, ),  # 6
    (7, TType.I32, 'attribute', None, None, ),  # 7
    (8, TType.I64, 'startDateTime', None, None, ),  # 8
    (9, TType.I64, 'endDateTime', None, None, ),  # 9
)


class shuffledReplayDateRange_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = DataFrame()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('shuffledReplayDateRange_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(shuffledReplayDateRange_result)
shuffledReplayDateRange_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [DataFrame, None], None, ),  # 0
)
fix_spec(all_structs)
del all_structs

